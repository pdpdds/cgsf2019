// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FPSPacket.proto

#include "FPSPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace FPSPacket {
class MSG_PLAYER_MOVE_UPDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_MOVE_UPDATE> _instance;
} _MSG_PLAYER_MOVE_UPDATE_default_instance_;
class MSG_PLAYER_LOOK_UPDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_LOOK_UPDATE> _instance;
} _MSG_PLAYER_LOOK_UPDATE_default_instance_;
class MSG_PLAYER_HEALTHDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_HEALTH> _instance;
} _MSG_PLAYER_HEALTH_default_instance_;
class MSG_PLAYER_SCOREDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_SCORE> _instance;
} _MSG_PLAYER_SCORE_default_instance_;
class MSG_PLAYER_WEAPON_CHANGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_WEAPON_CHANGE> _instance;
} _MSG_PLAYER_WEAPON_CHANGE_default_instance_;
class MSG_PLAYER_WEAPON_CHANGINGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PLAYER_WEAPON_CHANGING> _instance;
} _MSG_PLAYER_WEAPON_CHANGING_default_instance_;
class MSG_SPAWN_PLAYERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SPAWN_PLAYER> _instance;
} _MSG_SPAWN_PLAYER_default_instance_;
}  // namespace FPSPacket
static void InitDefaultsscc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_HEALTH_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_HEALTH();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_HEALTH::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_LOOK_UPDATE_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_LOOK_UPDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_LOOK_UPDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_MOVE_UPDATE_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_MOVE_UPDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_MOVE_UPDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_SCORE_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_SCORE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_SCORE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_WEAPON_CHANGE_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_PLAYER_WEAPON_CHANGING_default_instance_;
    new (ptr) ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto}, {}};

static void InitDefaultsscc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FPSPacket::_MSG_SPAWN_PLAYER_default_instance_;
    new (ptr) ::FPSPacket::MSG_SPAWN_PLAYER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FPSPacket::MSG_SPAWN_PLAYER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FPSPacket_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FPSPacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FPSPacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FPSPacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_MOVE_UPDATE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_MOVE_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_MOVE_UPDATE, moveupdate_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_LOOK_UPDATE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_LOOK_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_LOOK_UPDATE, lookupdate_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_HEALTH, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_HEALTH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_HEALTH, playerhealth_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_SCORE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_SCORE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_SCORE, playerscore_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGE, weaponchange_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGING, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_PLAYER_WEAPON_CHANGING, weaponchanging_),
  0,
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_SPAWN_PLAYER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_SPAWN_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FPSPacket::MSG_SPAWN_PLAYER, spawnplayer_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::FPSPacket::MSG_PLAYER_MOVE_UPDATE)},
  { 7, 13, sizeof(::FPSPacket::MSG_PLAYER_LOOK_UPDATE)},
  { 14, 20, sizeof(::FPSPacket::MSG_PLAYER_HEALTH)},
  { 21, 27, sizeof(::FPSPacket::MSG_PLAYER_SCORE)},
  { 28, 34, sizeof(::FPSPacket::MSG_PLAYER_WEAPON_CHANGE)},
  { 35, 41, sizeof(::FPSPacket::MSG_PLAYER_WEAPON_CHANGING)},
  { 42, 48, sizeof(::FPSPacket::MSG_SPAWN_PLAYER)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_MOVE_UPDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_LOOK_UPDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_HEALTH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_SCORE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_WEAPON_CHANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_PLAYER_WEAPON_CHANGING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FPSPacket::_MSG_SPAWN_PLAYER_default_instance_),
};

const char descriptor_table_protodef_FPSPacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017FPSPacket.proto\022\tFPSPacket\",\n\026MSG_PLAY"
  "ER_MOVE_UPDATE\022\022\n\nmoveupdate\030\001 \002(\014\",\n\026MS"
  "G_PLAYER_LOOK_UPDATE\022\022\n\nlookupdate\030\001 \002(\014"
  "\")\n\021MSG_PLAYER_HEALTH\022\024\n\014playerhealth\030\001 "
  "\002(\014\"\'\n\020MSG_PLAYER_SCORE\022\023\n\013PlayerScore\030\001"
  " \002(\014\"0\n\030MSG_PLAYER_WEAPON_CHANGE\022\024\n\014Weap"
  "onChange\030\001 \002(\014\"4\n\032MSG_PLAYER_WEAPON_CHAN"
  "GING\022\026\n\016WeaponChanging\030\001 \002(\014\"\'\n\020MSG_SPAW"
  "N_PLAYER\022\023\n\013SpawnPlayer\030\001 \002(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FPSPacket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FPSPacket_2eproto_sccs[7] = {
  &scc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto.base,
  &scc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto.base,
  &scc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto.base,
  &scc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto.base,
  &scc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto.base,
  &scc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto.base,
  &scc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FPSPacket_2eproto_once;
static bool descriptor_table_FPSPacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FPSPacket_2eproto = {
  &descriptor_table_FPSPacket_2eproto_initialized, descriptor_table_protodef_FPSPacket_2eproto, "FPSPacket.proto", 349,
  &descriptor_table_FPSPacket_2eproto_once, descriptor_table_FPSPacket_2eproto_sccs, descriptor_table_FPSPacket_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_FPSPacket_2eproto::offsets,
  file_level_metadata_FPSPacket_2eproto, 7, file_level_enum_descriptors_FPSPacket_2eproto, file_level_service_descriptors_FPSPacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FPSPacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FPSPacket_2eproto), true);
namespace FPSPacket {

// ===================================================================

void MSG_PLAYER_MOVE_UPDATE::InitAsDefaultInstance() {
}
class MSG_PLAYER_MOVE_UPDATE::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_MOVE_UPDATE>()._has_bits_);
  static void set_has_moveupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_MOVE_UPDATE::MSG_PLAYER_MOVE_UPDATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
}
MSG_PLAYER_MOVE_UPDATE::MSG_PLAYER_MOVE_UPDATE(const MSG_PLAYER_MOVE_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moveupdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_moveupdate()) {
    moveupdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.moveupdate_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
}

void MSG_PLAYER_MOVE_UPDATE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto.base);
  moveupdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_MOVE_UPDATE::~MSG_PLAYER_MOVE_UPDATE() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  SharedDtor();
}

void MSG_PLAYER_MOVE_UPDATE::SharedDtor() {
  moveupdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_MOVE_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_MOVE_UPDATE& MSG_PLAYER_MOVE_UPDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_MOVE_UPDATE_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_MOVE_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    moveupdate_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_MOVE_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes moveupdate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_moveupdate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_MOVE_UPDATE::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes moveupdate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_moveupdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_MOVE_UPDATE::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes moveupdate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->moveupdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_MOVE_UPDATE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes moveupdate = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->moveupdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  return target;
}

size_t MSG_PLAYER_MOVE_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes moveupdate = 1;
  if (has_moveupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->moveupdate());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_MOVE_UPDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_MOVE_UPDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_MOVE_UPDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_MOVE_UPDATE::MergeFrom(const MSG_PLAYER_MOVE_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_moveupdate()) {
    _has_bits_[0] |= 0x00000001u;
    moveupdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.moveupdate_);
  }
}

void MSG_PLAYER_MOVE_UPDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_MOVE_UPDATE::CopyFrom(const MSG_PLAYER_MOVE_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_MOVE_UPDATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_MOVE_UPDATE::InternalSwap(MSG_PLAYER_MOVE_UPDATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  moveupdate_.Swap(&other->moveupdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_MOVE_UPDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PLAYER_LOOK_UPDATE::InitAsDefaultInstance() {
}
class MSG_PLAYER_LOOK_UPDATE::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_LOOK_UPDATE>()._has_bits_);
  static void set_has_lookupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_LOOK_UPDATE::MSG_PLAYER_LOOK_UPDATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
}
MSG_PLAYER_LOOK_UPDATE::MSG_PLAYER_LOOK_UPDATE(const MSG_PLAYER_LOOK_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lookupdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_lookupdate()) {
    lookupdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lookupdate_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
}

void MSG_PLAYER_LOOK_UPDATE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto.base);
  lookupdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_LOOK_UPDATE::~MSG_PLAYER_LOOK_UPDATE() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  SharedDtor();
}

void MSG_PLAYER_LOOK_UPDATE::SharedDtor() {
  lookupdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_LOOK_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_LOOK_UPDATE& MSG_PLAYER_LOOK_UPDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_LOOK_UPDATE_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_LOOK_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lookupdate_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_LOOK_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes lookupdate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lookupdate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_LOOK_UPDATE::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes lookupdate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lookupdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_LOOK_UPDATE::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes lookupdate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->lookupdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_LOOK_UPDATE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes lookupdate = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->lookupdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  return target;
}

size_t MSG_PLAYER_LOOK_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes lookupdate = 1;
  if (has_lookupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lookupdate());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_LOOK_UPDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_LOOK_UPDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_LOOK_UPDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_LOOK_UPDATE::MergeFrom(const MSG_PLAYER_LOOK_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lookupdate()) {
    _has_bits_[0] |= 0x00000001u;
    lookupdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lookupdate_);
  }
}

void MSG_PLAYER_LOOK_UPDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_LOOK_UPDATE::CopyFrom(const MSG_PLAYER_LOOK_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_LOOK_UPDATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_LOOK_UPDATE::InternalSwap(MSG_PLAYER_LOOK_UPDATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lookupdate_.Swap(&other->lookupdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_LOOK_UPDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PLAYER_HEALTH::InitAsDefaultInstance() {
}
class MSG_PLAYER_HEALTH::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_HEALTH>()._has_bits_);
  static void set_has_playerhealth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_HEALTH::MSG_PLAYER_HEALTH()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_HEALTH)
}
MSG_PLAYER_HEALTH::MSG_PLAYER_HEALTH(const MSG_PLAYER_HEALTH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerhealth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerhealth()) {
    playerhealth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerhealth_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_HEALTH)
}

void MSG_PLAYER_HEALTH::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto.base);
  playerhealth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_HEALTH::~MSG_PLAYER_HEALTH() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_HEALTH)
  SharedDtor();
}

void MSG_PLAYER_HEALTH::SharedDtor() {
  playerhealth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_HEALTH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_HEALTH& MSG_PLAYER_HEALTH::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_HEALTH_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_HEALTH::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_HEALTH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerhealth_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_HEALTH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes playerhealth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_playerhealth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_HEALTH::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_HEALTH)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes playerhealth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerhealth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_HEALTH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_HEALTH)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_HEALTH::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_HEALTH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes playerhealth = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->playerhealth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_HEALTH)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_HEALTH::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_HEALTH)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes playerhealth = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerhealth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_HEALTH)
  return target;
}

size_t MSG_PLAYER_HEALTH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_HEALTH)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes playerhealth = 1;
  if (has_playerhealth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->playerhealth());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_HEALTH::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_HEALTH)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_HEALTH* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_HEALTH>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_HEALTH)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_HEALTH)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_HEALTH::MergeFrom(const MSG_PLAYER_HEALTH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_HEALTH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerhealth()) {
    _has_bits_[0] |= 0x00000001u;
    playerhealth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerhealth_);
  }
}

void MSG_PLAYER_HEALTH::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_HEALTH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_HEALTH::CopyFrom(const MSG_PLAYER_HEALTH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_HEALTH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_HEALTH::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_HEALTH::InternalSwap(MSG_PLAYER_HEALTH* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerhealth_.Swap(&other->playerhealth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_HEALTH::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PLAYER_SCORE::InitAsDefaultInstance() {
}
class MSG_PLAYER_SCORE::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_SCORE>()._has_bits_);
  static void set_has_playerscore(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_SCORE::MSG_PLAYER_SCORE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_SCORE)
}
MSG_PLAYER_SCORE::MSG_PLAYER_SCORE(const MSG_PLAYER_SCORE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerscore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerscore()) {
    playerscore_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerscore_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_SCORE)
}

void MSG_PLAYER_SCORE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto.base);
  playerscore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_SCORE::~MSG_PLAYER_SCORE() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_SCORE)
  SharedDtor();
}

void MSG_PLAYER_SCORE::SharedDtor() {
  playerscore_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_SCORE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_SCORE& MSG_PLAYER_SCORE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_SCORE_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_SCORE::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_SCORE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerscore_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_SCORE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes PlayerScore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_playerscore(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_SCORE::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_SCORE)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes PlayerScore = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerscore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_SCORE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_SCORE)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_SCORE::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_SCORE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes PlayerScore = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->playerscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_SCORE)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_SCORE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_SCORE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes PlayerScore = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_SCORE)
  return target;
}

size_t MSG_PLAYER_SCORE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_SCORE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes PlayerScore = 1;
  if (has_playerscore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->playerscore());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_SCORE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_SCORE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_SCORE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_SCORE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_SCORE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_SCORE)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_SCORE::MergeFrom(const MSG_PLAYER_SCORE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_SCORE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerscore()) {
    _has_bits_[0] |= 0x00000001u;
    playerscore_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerscore_);
  }
}

void MSG_PLAYER_SCORE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_SCORE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_SCORE::CopyFrom(const MSG_PLAYER_SCORE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_SCORE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_SCORE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_SCORE::InternalSwap(MSG_PLAYER_SCORE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerscore_.Swap(&other->playerscore_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_SCORE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PLAYER_WEAPON_CHANGE::InitAsDefaultInstance() {
}
class MSG_PLAYER_WEAPON_CHANGE::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_WEAPON_CHANGE>()._has_bits_);
  static void set_has_weaponchange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_WEAPON_CHANGE::MSG_PLAYER_WEAPON_CHANGE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
}
MSG_PLAYER_WEAPON_CHANGE::MSG_PLAYER_WEAPON_CHANGE(const MSG_PLAYER_WEAPON_CHANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weaponchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_weaponchange()) {
    weaponchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.weaponchange_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
}

void MSG_PLAYER_WEAPON_CHANGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto.base);
  weaponchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_WEAPON_CHANGE::~MSG_PLAYER_WEAPON_CHANGE() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  SharedDtor();
}

void MSG_PLAYER_WEAPON_CHANGE::SharedDtor() {
  weaponchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_WEAPON_CHANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_WEAPON_CHANGE& MSG_PLAYER_WEAPON_CHANGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_WEAPON_CHANGE_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_WEAPON_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    weaponchange_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_WEAPON_CHANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes WeaponChange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_weaponchange(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_WEAPON_CHANGE::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes WeaponChange = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weaponchange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_WEAPON_CHANGE::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes WeaponChange = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->weaponchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_WEAPON_CHANGE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes WeaponChange = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->weaponchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  return target;
}

size_t MSG_PLAYER_WEAPON_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes WeaponChange = 1;
  if (has_weaponchange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->weaponchange());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_WEAPON_CHANGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_WEAPON_CHANGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_WEAPON_CHANGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_WEAPON_CHANGE::MergeFrom(const MSG_PLAYER_WEAPON_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weaponchange()) {
    _has_bits_[0] |= 0x00000001u;
    weaponchange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.weaponchange_);
  }
}

void MSG_PLAYER_WEAPON_CHANGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGE::CopyFrom(const MSG_PLAYER_WEAPON_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_WEAPON_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_WEAPON_CHANGE::InternalSwap(MSG_PLAYER_WEAPON_CHANGE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weaponchange_.Swap(&other->weaponchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_WEAPON_CHANGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PLAYER_WEAPON_CHANGING::InitAsDefaultInstance() {
}
class MSG_PLAYER_WEAPON_CHANGING::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PLAYER_WEAPON_CHANGING>()._has_bits_);
  static void set_has_weaponchanging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PLAYER_WEAPON_CHANGING::MSG_PLAYER_WEAPON_CHANGING()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
}
MSG_PLAYER_WEAPON_CHANGING::MSG_PLAYER_WEAPON_CHANGING(const MSG_PLAYER_WEAPON_CHANGING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weaponchanging_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_weaponchanging()) {
    weaponchanging_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.weaponchanging_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
}

void MSG_PLAYER_WEAPON_CHANGING::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto.base);
  weaponchanging_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_PLAYER_WEAPON_CHANGING::~MSG_PLAYER_WEAPON_CHANGING() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  SharedDtor();
}

void MSG_PLAYER_WEAPON_CHANGING::SharedDtor() {
  weaponchanging_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PLAYER_WEAPON_CHANGING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PLAYER_WEAPON_CHANGING& MSG_PLAYER_WEAPON_CHANGING::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PLAYER_WEAPON_CHANGING_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_PLAYER_WEAPON_CHANGING::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    weaponchanging_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_PLAYER_WEAPON_CHANGING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes WeaponChanging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_weaponchanging(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_PLAYER_WEAPON_CHANGING::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes WeaponChanging = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weaponchanging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_PLAYER_WEAPON_CHANGING::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes WeaponChanging = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->weaponchanging(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PLAYER_WEAPON_CHANGING::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes WeaponChanging = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->weaponchanging(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  return target;
}

size_t MSG_PLAYER_WEAPON_CHANGING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes WeaponChanging = 1;
  if (has_weaponchanging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->weaponchanging());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PLAYER_WEAPON_CHANGING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PLAYER_WEAPON_CHANGING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PLAYER_WEAPON_CHANGING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
    MergeFrom(*source);
  }
}

void MSG_PLAYER_WEAPON_CHANGING::MergeFrom(const MSG_PLAYER_WEAPON_CHANGING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weaponchanging()) {
    _has_bits_[0] |= 0x00000001u;
    weaponchanging_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.weaponchanging_);
  }
}

void MSG_PLAYER_WEAPON_CHANGING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PLAYER_WEAPON_CHANGING::CopyFrom(const MSG_PLAYER_WEAPON_CHANGING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PLAYER_WEAPON_CHANGING::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PLAYER_WEAPON_CHANGING::InternalSwap(MSG_PLAYER_WEAPON_CHANGING* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weaponchanging_.Swap(&other->weaponchanging_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PLAYER_WEAPON_CHANGING::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SPAWN_PLAYER::InitAsDefaultInstance() {
}
class MSG_SPAWN_PLAYER::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_SPAWN_PLAYER>()._has_bits_);
  static void set_has_spawnplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_SPAWN_PLAYER::MSG_SPAWN_PLAYER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPSPacket.MSG_SPAWN_PLAYER)
}
MSG_SPAWN_PLAYER::MSG_SPAWN_PLAYER(const MSG_SPAWN_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spawnplayer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_spawnplayer()) {
    spawnplayer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spawnplayer_);
  }
  // @@protoc_insertion_point(copy_constructor:FPSPacket.MSG_SPAWN_PLAYER)
}

void MSG_SPAWN_PLAYER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto.base);
  spawnplayer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_SPAWN_PLAYER::~MSG_SPAWN_PLAYER() {
  // @@protoc_insertion_point(destructor:FPSPacket.MSG_SPAWN_PLAYER)
  SharedDtor();
}

void MSG_SPAWN_PLAYER::SharedDtor() {
  spawnplayer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_SPAWN_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SPAWN_PLAYER& MSG_SPAWN_PLAYER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SPAWN_PLAYER_FPSPacket_2eproto.base);
  return *internal_default_instance();
}


void MSG_SPAWN_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:FPSPacket.MSG_SPAWN_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    spawnplayer_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_SPAWN_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes SpawnPlayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_spawnplayer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_SPAWN_PLAYER::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPSPacket.MSG_SPAWN_PLAYER)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes SpawnPlayer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spawnplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPSPacket.MSG_SPAWN_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPSPacket.MSG_SPAWN_PLAYER)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_SPAWN_PLAYER::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPSPacket.MSG_SPAWN_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes SpawnPlayer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->spawnplayer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPSPacket.MSG_SPAWN_PLAYER)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SPAWN_PLAYER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPSPacket.MSG_SPAWN_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes SpawnPlayer = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->spawnplayer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPSPacket.MSG_SPAWN_PLAYER)
  return target;
}

size_t MSG_SPAWN_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FPSPacket.MSG_SPAWN_PLAYER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes SpawnPlayer = 1;
  if (has_spawnplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->spawnplayer());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SPAWN_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FPSPacket.MSG_SPAWN_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SPAWN_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SPAWN_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FPSPacket.MSG_SPAWN_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FPSPacket.MSG_SPAWN_PLAYER)
    MergeFrom(*source);
  }
}

void MSG_SPAWN_PLAYER::MergeFrom(const MSG_SPAWN_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FPSPacket.MSG_SPAWN_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spawnplayer()) {
    _has_bits_[0] |= 0x00000001u;
    spawnplayer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spawnplayer_);
  }
}

void MSG_SPAWN_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FPSPacket.MSG_SPAWN_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SPAWN_PLAYER::CopyFrom(const MSG_SPAWN_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FPSPacket.MSG_SPAWN_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SPAWN_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_SPAWN_PLAYER::InternalSwap(MSG_SPAWN_PLAYER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  spawnplayer_.Swap(&other->spawnplayer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SPAWN_PLAYER::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FPSPacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_MOVE_UPDATE* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_MOVE_UPDATE >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_MOVE_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_LOOK_UPDATE* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_LOOK_UPDATE >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_LOOK_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_HEALTH* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_HEALTH >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_HEALTH >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_SCORE* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_SCORE >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_SCORE >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING* Arena::CreateMaybeMessage< ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING >(arena);
}
template<> PROTOBUF_NOINLINE ::FPSPacket::MSG_SPAWN_PLAYER* Arena::CreateMaybeMessage< ::FPSPacket::MSG_SPAWN_PLAYER >(Arena* arena) {
  return Arena::CreateInternal< ::FPSPacket::MSG_SPAWN_PLAYER >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

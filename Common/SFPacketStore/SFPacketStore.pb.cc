// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SFPacketStore.proto

#include "SFPacketStore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SFPacketStore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerList_PeerInfo_SFPacketStore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SFPacketStore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomList_RoomInfo_SFPacketStore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SFPacketStore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomMember_Member_SFPacketStore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SFPacketStore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto;
namespace SFPacketStore {
class LoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login> _instance;
} _Login_default_instance_;
class LoginSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginSuccess> _instance;
} _LoginSuccess_default_instance_;
class LoginFailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginFail> _instance;
} _LoginFail_default_instance_;
class TeamInfo_TeamMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamInfo_TeamMember> _instance;
} _TeamInfo_TeamMember_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamInfo> _instance;
} _TeamInfo_default_instance_;
class RoomMember_MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomMember_Member> _instance;
} _RoomMember_Member_default_instance_;
class RoomMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomMember> _instance;
} _RoomMember_default_instance_;
class EnterTeamMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterTeamMember> _instance;
} _EnterTeamMember_default_instance_;
class LeaveTeamMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveTeamMember> _instance;
} _LeaveTeamMember_default_instance_;
class InvalidPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvalidPacket> _instance;
} _InvalidPacket_default_instance_;
class EnterLobbyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterLobby> _instance;
} _EnterLobby_default_instance_;
class ChatReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatReq> _instance;
} _ChatReq_default_instance_;
class ChatResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRes> _instance;
} _ChatRes_default_instance_;
class EnterRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoom> _instance;
} _EnterRoom_default_instance_;
class CreateRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoom> _instance;
} _CreateRoom_default_instance_;
class LeaveRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveRoom> _instance;
} _LeaveRoom_default_instance_;
class RoomList_RoomInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomList_RoomInfo> _instance;
} _RoomList_RoomInfo_default_instance_;
class RoomListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomList> _instance;
} _RoomList_default_instance_;
class RoomListRefreshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomListRefresh> _instance;
} _RoomListRefresh_default_instance_;
class ChangeTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeTeam> _instance;
} _ChangeTeam_default_instance_;
class LoadingStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadingStart> _instance;
} _LoadingStart_default_instance_;
class LoadingCompleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadingComplete> _instance;
} _LoadingComplete_default_instance_;
class PlayStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayStart> _instance;
} _PlayStart_default_instance_;
class PlayMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayMove> _instance;
} _PlayMove_default_instance_;
class PlayEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayEnd> _instance;
} _PlayEnd_default_instance_;
class PlayScoreInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayScoreInfo> _instance;
} _PlayScoreInfo_default_instance_;
class PlayPlayerScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayPlayerScore> _instance;
} _PlayPlayerScore_default_instance_;
class PeerList_PeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerList_PeerInfo> _instance;
} _PeerList_PeerInfo_default_instance_;
class PeerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerList> _instance;
} _PeerList_default_instance_;
class MSG_CREATE_PLAYERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_CREATE_PLAYER> _instance;
} _MSG_CREATE_PLAYER_default_instance_;
class MSG_DESTROY_PLAYERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_DESTROY_PLAYER> _instance;
} _MSG_DESTROY_PLAYER_default_instance_;
class PLAYER_IPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLAYER_IP> _instance;
} _PLAYER_IP_default_instance_;
class ADD_PEERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ADD_PEER> _instance;
} _ADD_PEER_default_instance_;
class DELETE_PEERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DELETE_PEER> _instance;
} _DELETE_PEER_default_instance_;
}  // namespace SFPacketStore
static void InitDefaultsscc_info_ADD_PEER_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_ADD_PEER_default_instance_;
    new (ptr) ::SFPacketStore::ADD_PEER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::ADD_PEER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ADD_PEER_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ADD_PEER_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_ChangeTeam_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_ChangeTeam_default_instance_;
    new (ptr) ::SFPacketStore::ChangeTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::ChangeTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeTeam_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChangeTeam_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_ChatReq_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_ChatReq_default_instance_;
    new (ptr) ::SFPacketStore::ChatReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::ChatReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatReq_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChatReq_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_ChatRes_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_ChatRes_default_instance_;
    new (ptr) ::SFPacketStore::ChatRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::ChatRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRes_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChatRes_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_CreateRoom_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_CreateRoom_default_instance_;
    new (ptr) ::SFPacketStore::CreateRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::CreateRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoom_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateRoom_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_DELETE_PEER_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_DELETE_PEER_default_instance_;
    new (ptr) ::SFPacketStore::DELETE_PEER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::DELETE_PEER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DELETE_PEER_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DELETE_PEER_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_EnterLobby_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_EnterLobby_default_instance_;
    new (ptr) ::SFPacketStore::EnterLobby();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::EnterLobby::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterLobby_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnterLobby_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_EnterRoom_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_EnterRoom_default_instance_;
    new (ptr) ::SFPacketStore::EnterRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::EnterRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRoom_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnterRoom_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_EnterTeamMember_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_EnterTeamMember_default_instance_;
    new (ptr) ::SFPacketStore::EnterTeamMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::EnterTeamMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterTeamMember_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnterTeamMember_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_InvalidPacket_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_InvalidPacket_default_instance_;
    new (ptr) ::SFPacketStore::InvalidPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::InvalidPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvalidPacket_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InvalidPacket_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LeaveRoom_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LeaveRoom_default_instance_;
    new (ptr) ::SFPacketStore::LeaveRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LeaveRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveRoom_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LeaveRoom_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LeaveTeamMember_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LeaveTeamMember_default_instance_;
    new (ptr) ::SFPacketStore::LeaveTeamMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LeaveTeamMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveTeamMember_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LeaveTeamMember_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LoadingComplete_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LoadingComplete_default_instance_;
    new (ptr) ::SFPacketStore::LoadingComplete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LoadingComplete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadingComplete_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoadingComplete_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LoadingStart_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LoadingStart_default_instance_;
    new (ptr) ::SFPacketStore::LoadingStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LoadingStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadingStart_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoadingStart_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_Login_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_Login_default_instance_;
    new (ptr) ::SFPacketStore::Login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::Login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Login_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LoginFail_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LoginFail_default_instance_;
    new (ptr) ::SFPacketStore::LoginFail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LoginFail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginFail_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginFail_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_LoginSuccess_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_LoginSuccess_default_instance_;
    new (ptr) ::SFPacketStore::LoginSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::LoginSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginSuccess_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginSuccess_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_MSG_CREATE_PLAYER_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_MSG_CREATE_PLAYER_default_instance_;
    new (ptr) ::SFPacketStore::MSG_CREATE_PLAYER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::MSG_CREATE_PLAYER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_CREATE_PLAYER_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_CREATE_PLAYER_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_MSG_DESTROY_PLAYER_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_MSG_DESTROY_PLAYER_default_instance_;
    new (ptr) ::SFPacketStore::MSG_DESTROY_PLAYER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::MSG_DESTROY_PLAYER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_DESTROY_PLAYER_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MSG_DESTROY_PLAYER_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PLAYER_IP_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PLAYER_IP_default_instance_;
    new (ptr) ::SFPacketStore::PLAYER_IP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PLAYER_IP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PLAYER_IP_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PLAYER_IP_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PeerList_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PeerList_default_instance_;
    new (ptr) ::SFPacketStore::PeerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PeerList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerList_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PeerList_SFPacketStore_2eproto}, {
      &scc_info_PeerList_PeerInfo_SFPacketStore_2eproto.base,}};

static void InitDefaultsscc_info_PeerList_PeerInfo_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PeerList_PeerInfo_default_instance_;
    new (ptr) ::SFPacketStore::PeerList_PeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PeerList_PeerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerList_PeerInfo_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PeerList_PeerInfo_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PlayEnd_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PlayEnd_default_instance_;
    new (ptr) ::SFPacketStore::PlayEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PlayEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayEnd_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayEnd_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PlayMove_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PlayMove_default_instance_;
    new (ptr) ::SFPacketStore::PlayMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PlayMove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayMove_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayMove_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PlayPlayerScore_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PlayPlayerScore_default_instance_;
    new (ptr) ::SFPacketStore::PlayPlayerScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PlayPlayerScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayPlayerScore_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayPlayerScore_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PlayScoreInfo_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PlayScoreInfo_default_instance_;
    new (ptr) ::SFPacketStore::PlayScoreInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PlayScoreInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayScoreInfo_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayScoreInfo_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_PlayStart_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_PlayStart_default_instance_;
    new (ptr) ::SFPacketStore::PlayStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::PlayStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayStart_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayStart_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_RoomList_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_RoomList_default_instance_;
    new (ptr) ::SFPacketStore::RoomList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::RoomList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomList_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoomList_SFPacketStore_2eproto}, {
      &scc_info_RoomList_RoomInfo_SFPacketStore_2eproto.base,}};

static void InitDefaultsscc_info_RoomList_RoomInfo_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_RoomList_RoomInfo_default_instance_;
    new (ptr) ::SFPacketStore::RoomList_RoomInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::RoomList_RoomInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomList_RoomInfo_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoomList_RoomInfo_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_RoomListRefresh_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_RoomListRefresh_default_instance_;
    new (ptr) ::SFPacketStore::RoomListRefresh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::RoomListRefresh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomListRefresh_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoomListRefresh_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_RoomMember_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_RoomMember_default_instance_;
    new (ptr) ::SFPacketStore::RoomMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::RoomMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomMember_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoomMember_SFPacketStore_2eproto}, {
      &scc_info_RoomMember_Member_SFPacketStore_2eproto.base,}};

static void InitDefaultsscc_info_RoomMember_Member_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_RoomMember_Member_default_instance_;
    new (ptr) ::SFPacketStore::RoomMember_Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::RoomMember_Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomMember_Member_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoomMember_Member_SFPacketStore_2eproto}, {}};

static void InitDefaultsscc_info_TeamInfo_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_TeamInfo_default_instance_;
    new (ptr) ::SFPacketStore::TeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::TeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamInfo_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TeamInfo_SFPacketStore_2eproto}, {
      &scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto.base,}};

static void InitDefaultsscc_info_TeamInfo_TeamMember_SFPacketStore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SFPacketStore::_TeamInfo_TeamMember_default_instance_;
    new (ptr) ::SFPacketStore::TeamInfo_TeamMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SFPacketStore::TeamInfo_TeamMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TeamInfo_TeamMember_SFPacketStore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SFPacketStore_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SFPacketStore_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SFPacketStore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SFPacketStore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::Login, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::Login, username_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::Login, password_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginSuccess, result_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginSuccess, userinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginFail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoginFail, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo_TeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo_TeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo_TeamMember, member_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo, type_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::TeamInfo, member_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember_Member, member_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember_Member, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember_Member, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomMember, info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterTeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterTeamMember, member_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterTeamMember, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterTeamMember, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveTeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveTeamMember, member_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveTeamMember, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveTeamMember, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::InvalidPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::InvalidPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::InvalidPacket, arg_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterLobby, lobbyindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatReq, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatRes, sender_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChatRes, message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterRoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterRoom, roomindex_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterRoom, gamemode_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::EnterRoom, password_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::CreateRoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::CreateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::CreateRoom, gamemode_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::CreateRoom, password_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveRoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LeaveRoom, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, roomindex_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, roomname_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, roomchief_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, usercount_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, maxusercount_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, needpassword_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList_RoomInfo, gamemode_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomList, info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomListRefresh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::RoomListRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChangeTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ChangeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoadingStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoadingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoadingComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::LoadingComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayMove, posx_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayMove, posy_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayMove, posz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayScoreInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayScoreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayScoreInfo, redkillcount_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayScoreInfo, bluekillcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, name_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, teamtype_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, kill_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PlayPlayerScore, death_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList_PeerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList_PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList_PeerInfo, serial_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList_PeerInfo, info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PeerList, peer_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_CREATE_PLAYER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_CREATE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_CREATE_PLAYER, serial_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_CREATE_PLAYER, spawnindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_DESTROY_PLAYER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_DESTROY_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::MSG_DESTROY_PLAYER, serial_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PLAYER_IP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PLAYER_IP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::PLAYER_IP, playerip_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ADD_PEER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ADD_PEER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::ADD_PEER, addpeer_),
  0,
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::DELETE_PEER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::DELETE_PEER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SFPacketStore::DELETE_PEER, serial_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SFPacketStore::Login)},
  { 9, 16, sizeof(::SFPacketStore::LoginSuccess)},
  { 18, 24, sizeof(::SFPacketStore::LoginFail)},
  { 25, 31, sizeof(::SFPacketStore::TeamInfo_TeamMember)},
  { 32, 39, sizeof(::SFPacketStore::TeamInfo)},
  { 41, 49, sizeof(::SFPacketStore::RoomMember_Member)},
  { 52, 58, sizeof(::SFPacketStore::RoomMember)},
  { 59, 67, sizeof(::SFPacketStore::EnterTeamMember)},
  { 70, 78, sizeof(::SFPacketStore::LeaveTeamMember)},
  { 81, 87, sizeof(::SFPacketStore::InvalidPacket)},
  { 88, 94, sizeof(::SFPacketStore::EnterLobby)},
  { 95, 101, sizeof(::SFPacketStore::ChatReq)},
  { 102, 109, sizeof(::SFPacketStore::ChatRes)},
  { 111, 119, sizeof(::SFPacketStore::EnterRoom)},
  { 122, 129, sizeof(::SFPacketStore::CreateRoom)},
  { 131, 137, sizeof(::SFPacketStore::LeaveRoom)},
  { 138, 150, sizeof(::SFPacketStore::RoomList_RoomInfo)},
  { 157, 163, sizeof(::SFPacketStore::RoomList)},
  { 164, 169, sizeof(::SFPacketStore::RoomListRefresh)},
  { 169, 174, sizeof(::SFPacketStore::ChangeTeam)},
  { 174, 179, sizeof(::SFPacketStore::LoadingStart)},
  { 179, 184, sizeof(::SFPacketStore::LoadingComplete)},
  { 184, 189, sizeof(::SFPacketStore::PlayStart)},
  { 189, 197, sizeof(::SFPacketStore::PlayMove)},
  { 200, 205, sizeof(::SFPacketStore::PlayEnd)},
  { 205, 212, sizeof(::SFPacketStore::PlayScoreInfo)},
  { 214, 223, sizeof(::SFPacketStore::PlayPlayerScore)},
  { 227, 234, sizeof(::SFPacketStore::PeerList_PeerInfo)},
  { 236, 242, sizeof(::SFPacketStore::PeerList)},
  { 243, 250, sizeof(::SFPacketStore::MSG_CREATE_PLAYER)},
  { 252, 258, sizeof(::SFPacketStore::MSG_DESTROY_PLAYER)},
  { 259, 265, sizeof(::SFPacketStore::PLAYER_IP)},
  { 266, 272, sizeof(::SFPacketStore::ADD_PEER)},
  { 273, 279, sizeof(::SFPacketStore::DELETE_PEER)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LoginSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LoginFail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_TeamInfo_TeamMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_TeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_RoomMember_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_RoomMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_EnterTeamMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LeaveTeamMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_InvalidPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_EnterLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_ChatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_ChatRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_EnterRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_CreateRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LeaveRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_RoomList_RoomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_RoomList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_RoomListRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_ChangeTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LoadingStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_LoadingComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PlayStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PlayMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PlayEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PlayScoreInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PlayPlayerScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PeerList_PeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PeerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_MSG_CREATE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_MSG_DESTROY_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_PLAYER_IP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_ADD_PEER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SFPacketStore::_DELETE_PEER_default_instance_),
};

const char descriptor_table_protodef_SFPacketStore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023SFPacketStore.proto\022\rSFPacketStore\"+\n\005"
  "Login\022\020\n\010UserName\030\001 \002(\t\022\020\n\010Password\030\002 \002("
  "\t\"0\n\014LoginSuccess\022\016\n\006Result\030\001 \002(\005\022\020\n\010Use"
  "rInfo\030\002 \002(\014\"\033\n\tLoginFail\022\016\n\006Result\030\001 \002(\005"
  "\"\210\001\n\010TeamInfo\022*\n\004Type\030\001 \002(\0162\027.SFPacketSt"
  "ore.TeamType:\003RED\0222\n\006Member\030\006 \003(\0132\".SFPa"
  "cketStore.TeamInfo.TeamMember\032\034\n\nTeamMem"
  "ber\022\016\n\006Member\030\001 \002(\t\"\222\001\n\nRoomMember\022.\n\004In"
  "fo\030\014 \003(\0132 .SFPacketStore.RoomMember.Memb"
  "er\032T\n\006Member\022\016\n\006Member\030\001 \002(\t\022\023\n\013PlayerIn"
  "dex\030\002 \002(\005\022%\n\004Type\030\003 \002(\0162\027.SFPacketStore."
  "TeamType\"]\n\017EnterTeamMember\022\016\n\006Member\030\001 "
  "\002(\t\022\023\n\013PlayerIndex\030\002 \002(\005\022%\n\004Type\030\003 \002(\0162\027"
  ".SFPacketStore.TeamType\"]\n\017LeaveTeamMemb"
  "er\022\016\n\006Member\030\001 \002(\t\022\023\n\013PlayerIndex\030\002 \002(\005\022"
  "%\n\004Type\030\003 \002(\0162\027.SFPacketStore.TeamType\"\034"
  "\n\rInvalidPacket\022\013\n\003Arg\030\001 \002(\t\"#\n\nEnterLob"
  "by\022\025\n\nLobbyIndex\030\001 \001(\005:\0010\"\032\n\007ChatReq\022\017\n\007"
  "Message\030\001 \002(\t\"*\n\007ChatRes\022\016\n\006Sender\030\001 \002(\t"
  "\022\017\n\007Message\030\002 \002(\t\"B\n\tEnterRoom\022\021\n\tRoomIn"
  "dex\030\001 \002(\005\022\020\n\010GameMode\030\002 \002(\005\022\020\n\010Password\030"
  "\003 \001(\t\"0\n\nCreateRoom\022\020\n\010GameMode\030\001 \002(\005\022\020\n"
  "\010Password\030\002 \001(\t\"\036\n\tLeaveRoom\022\021\n\006Reason\030\001"
  " \001(\005:\0010\"\320\001\n\010RoomList\022.\n\004Info\030\n \003(\0132 .SFP"
  "acketStore.RoomList.RoomInfo\032\223\001\n\010RoomInf"
  "o\022\021\n\tRoomIndex\030\001 \002(\005\022\020\n\010RoomName\030\002 \002(\t\022\021"
  "\n\tRoomChief\030\003 \002(\t\022\021\n\tUserCount\030\004 \002(\005\022\024\n\014"
  "MaxUserCount\030\005 \002(\005\022\024\n\014NeedPassword\030\006 \002(\005"
  "\022\020\n\010GameMode\030\007 \002(\005\"\021\n\017RoomListRefresh\"\014\n"
  "\nChangeTeam\"\016\n\014LoadingStart\"\021\n\017LoadingCo"
  "mplete\"\013\n\tPlayStart\"4\n\010PlayMove\022\014\n\004PosX\030"
  "\001 \002(\002\022\014\n\004PosY\030\002 \002(\002\022\014\n\004PosZ\030\003 \002(\002\"\t\n\007Pla"
  "yEnd\"<\n\rPlayScoreInfo\022\024\n\014RedKillCount\030\001 "
  "\002(\005\022\025\n\rBlueKillCount\030\002 \002(\005\"N\n\017PlayPlayer"
  "Score\022\014\n\004name\030\001 \002(\t\022\020\n\010teamtype\030\002 \002(\005\022\014\n"
  "\004kill\030\003 \002(\005\022\r\n\005death\030\004 \002(\005\"d\n\010PeerList\022."
  "\n\004Peer\030\n \003(\0132 .SFPacketStore.PeerList.Pe"
  "erInfo\032(\n\010PeerInfo\022\016\n\006serial\030\001 \002(\005\022\014\n\004In"
  "fo\030\002 \002(\014\"7\n\021MSG_CREATE_PLAYER\022\016\n\006Serial\030"
  "\001 \002(\005\022\022\n\nspawnindex\030\002 \002(\005\"$\n\022MSG_DESTROY"
  "_PLAYER\022\016\n\006Serial\030\001 \002(\005\"\035\n\tPLAYER_IP\022\020\n\010"
  "playerip\030\001 \002(\014\"\033\n\010ADD_PEER\022\017\n\007addpeer\030\001 "
  "\002(\014\"\035\n\013DELETE_PEER\022\016\n\006serial\030\001 \002(\005*0\n\010Te"
  "amType\022\021\n\004NONE\020\377\377\377\377\377\377\377\377\377\001\022\007\n\003RED\020\000\022\010\n\004BL"
  "UE\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SFPacketStore_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SFPacketStore_2eproto_sccs[34] = {
  &scc_info_ADD_PEER_SFPacketStore_2eproto.base,
  &scc_info_ChangeTeam_SFPacketStore_2eproto.base,
  &scc_info_ChatReq_SFPacketStore_2eproto.base,
  &scc_info_ChatRes_SFPacketStore_2eproto.base,
  &scc_info_CreateRoom_SFPacketStore_2eproto.base,
  &scc_info_DELETE_PEER_SFPacketStore_2eproto.base,
  &scc_info_EnterLobby_SFPacketStore_2eproto.base,
  &scc_info_EnterRoom_SFPacketStore_2eproto.base,
  &scc_info_EnterTeamMember_SFPacketStore_2eproto.base,
  &scc_info_InvalidPacket_SFPacketStore_2eproto.base,
  &scc_info_LeaveRoom_SFPacketStore_2eproto.base,
  &scc_info_LeaveTeamMember_SFPacketStore_2eproto.base,
  &scc_info_LoadingComplete_SFPacketStore_2eproto.base,
  &scc_info_LoadingStart_SFPacketStore_2eproto.base,
  &scc_info_Login_SFPacketStore_2eproto.base,
  &scc_info_LoginFail_SFPacketStore_2eproto.base,
  &scc_info_LoginSuccess_SFPacketStore_2eproto.base,
  &scc_info_MSG_CREATE_PLAYER_SFPacketStore_2eproto.base,
  &scc_info_MSG_DESTROY_PLAYER_SFPacketStore_2eproto.base,
  &scc_info_PLAYER_IP_SFPacketStore_2eproto.base,
  &scc_info_PeerList_SFPacketStore_2eproto.base,
  &scc_info_PeerList_PeerInfo_SFPacketStore_2eproto.base,
  &scc_info_PlayEnd_SFPacketStore_2eproto.base,
  &scc_info_PlayMove_SFPacketStore_2eproto.base,
  &scc_info_PlayPlayerScore_SFPacketStore_2eproto.base,
  &scc_info_PlayScoreInfo_SFPacketStore_2eproto.base,
  &scc_info_PlayStart_SFPacketStore_2eproto.base,
  &scc_info_RoomList_SFPacketStore_2eproto.base,
  &scc_info_RoomList_RoomInfo_SFPacketStore_2eproto.base,
  &scc_info_RoomListRefresh_SFPacketStore_2eproto.base,
  &scc_info_RoomMember_SFPacketStore_2eproto.base,
  &scc_info_RoomMember_Member_SFPacketStore_2eproto.base,
  &scc_info_TeamInfo_SFPacketStore_2eproto.base,
  &scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SFPacketStore_2eproto_once;
static bool descriptor_table_SFPacketStore_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SFPacketStore_2eproto = {
  &descriptor_table_SFPacketStore_2eproto_initialized, descriptor_table_protodef_SFPacketStore_2eproto, "SFPacketStore.proto", 1764,
  &descriptor_table_SFPacketStore_2eproto_once, descriptor_table_SFPacketStore_2eproto_sccs, descriptor_table_SFPacketStore_2eproto_deps, 34, 0,
  schemas, file_default_instances, TableStruct_SFPacketStore_2eproto::offsets,
  file_level_metadata_SFPacketStore_2eproto, 34, file_level_enum_descriptors_SFPacketStore_2eproto, file_level_service_descriptors_SFPacketStore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SFPacketStore_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SFPacketStore_2eproto), true);
namespace SFPacketStore {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SFPacketStore_2eproto);
  return file_level_enum_descriptors_SFPacketStore_2eproto[0];
}
bool TeamType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Login::InitAsDefaultInstance() {
}
class Login::_Internal {
 public:
  using HasBits = decltype(std::declval<Login>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Login::Login()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.Login)
}

void Login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Login_SFPacketStore_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:SFPacketStore.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login& Login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_username(), ptr, ctx, "SFPacketStore.Login.UserName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_password(), ptr, ctx, "SFPacketStore.Login.Password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Login::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.Login)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.Login.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.Login.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.Login)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Login::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.Login.UserName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string Password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.Login.Password");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.Login)
}

::PROTOBUF_NAMESPACE_ID::uint8* Login::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.Login.UserName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string Password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.Login.Password");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.Login)
  return target;
}

size_t Login::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.Login)
  size_t total_size = 0;

  if (has_username()) {
    // required string UserName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_password()) {
    // required string Password = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.Login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string UserName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());

    // required string Password = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
}

void Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginSuccess::InitAsDefaultInstance() {
}
class LoginSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginSuccess>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginSuccess::LoginSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LoginSuccess)
}
LoginSuccess::LoginSuccess(const LoginSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_userinfo()) {
    userinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userinfo_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LoginSuccess)
}

void LoginSuccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginSuccess_SFPacketStore_2eproto.base);
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

LoginSuccess::~LoginSuccess() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LoginSuccess)
  SharedDtor();
}

void LoginSuccess::SharedDtor() {
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginSuccess& LoginSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginSuccess_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LoginSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LoginSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userinfo_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes UserInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_userinfo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginSuccess::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LoginSuccess)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes UserInfo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LoginSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LoginSuccess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginSuccess::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LoginSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required bytes UserInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->userinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LoginSuccess)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginSuccess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LoginSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required bytes UserInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->userinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LoginSuccess)
  return target;
}

size_t LoginSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.LoginSuccess)
  size_t total_size = 0;

  if (has_userinfo()) {
    // required bytes UserInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->userinfo());
  }

  if (has_result()) {
    // required int32 Result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t LoginSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LoginSuccess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes UserInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->userinfo());

    // required int32 Result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LoginSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LoginSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LoginSuccess)
    MergeFrom(*source);
  }
}

void LoginSuccess::MergeFrom(const LoginSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LoginSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      userinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LoginSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSuccess::CopyFrom(const LoginSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LoginSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LoginSuccess::InternalSwap(LoginSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginFail::InitAsDefaultInstance() {
}
class LoginFail::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginFail>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginFail::LoginFail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LoginFail)
}
LoginFail::LoginFail(const LoginFail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LoginFail)
}

void LoginFail::SharedCtor() {
  result_ = 0;
}

LoginFail::~LoginFail() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LoginFail)
  SharedDtor();
}

void LoginFail::SharedDtor() {
}

void LoginFail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginFail& LoginFail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginFail_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LoginFail::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LoginFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginFail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginFail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LoginFail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LoginFail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LoginFail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginFail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LoginFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LoginFail)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginFail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LoginFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LoginFail)
  return target;
}

size_t LoginFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LoginFail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 Result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginFail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LoginFail)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginFail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginFail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LoginFail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LoginFail)
    MergeFrom(*source);
  }
}

void LoginFail::MergeFrom(const LoginFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LoginFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void LoginFail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LoginFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginFail::CopyFrom(const LoginFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LoginFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LoginFail::InternalSwap(LoginFail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginFail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamInfo_TeamMember::InitAsDefaultInstance() {
}
class TeamInfo_TeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamInfo_TeamMember>()._has_bits_);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TeamInfo_TeamMember::TeamInfo_TeamMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.TeamInfo.TeamMember)
}
TeamInfo_TeamMember::TeamInfo_TeamMember(const TeamInfo_TeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_member()) {
    member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.TeamInfo.TeamMember)
}

void TeamInfo_TeamMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto.base);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TeamInfo_TeamMember::~TeamInfo_TeamMember() {
  // @@protoc_insertion_point(destructor:SFPacketStore.TeamInfo.TeamMember)
  SharedDtor();
}

void TeamInfo_TeamMember::SharedDtor() {
  member_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamInfo_TeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamInfo_TeamMember& TeamInfo_TeamMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamInfo_TeamMember_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void TeamInfo_TeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.TeamInfo.TeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    member_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeamInfo_TeamMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_member(), ptr, ctx, "SFPacketStore.TeamInfo.TeamMember.Member");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeamInfo_TeamMember::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.TeamInfo.TeamMember)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member().data(), static_cast<int>(this->member().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.TeamInfo.TeamMember.Member");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.TeamInfo.TeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.TeamInfo.TeamMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeamInfo_TeamMember::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.TeamInfo.TeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.TeamInfo.TeamMember.Member");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->member(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.TeamInfo.TeamMember)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamInfo_TeamMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.TeamInfo.TeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.TeamInfo.TeamMember.Member");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.TeamInfo.TeamMember)
  return target;
}

size_t TeamInfo_TeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.TeamInfo.TeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string Member = 1;
  if (has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo_TeamMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.TeamInfo.TeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo_TeamMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamInfo_TeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.TeamInfo.TeamMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.TeamInfo.TeamMember)
    MergeFrom(*source);
  }
}

void TeamInfo_TeamMember::MergeFrom(const TeamInfo_TeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.TeamInfo.TeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_member()) {
    _has_bits_[0] |= 0x00000001u;
    member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
}

void TeamInfo_TeamMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.TeamInfo.TeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo_TeamMember::CopyFrom(const TeamInfo_TeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.TeamInfo.TeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo_TeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TeamInfo_TeamMember::InternalSwap(TeamInfo_TeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.Swap(&other->member_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamInfo_TeamMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
}
class TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TeamInfo::TeamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamInfo_SFPacketStore_2eproto.base);
  type_ = 0;
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:SFPacketStore.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
}

void TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamInfo& TeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamInfo_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SFPacketStore.TeamType Type = 1 [default = RED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SFPacketStore::TeamType_IsValid(val))) {
            set_type(static_cast<::SFPacketStore::TeamType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeamInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.TeamInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SFPacketStore.TeamType Type = 1 [default = RED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.TeamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeamInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SFPacketStore.TeamType Type = 1 [default = RED];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->member(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.TeamInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SFPacketStore.TeamType Type = 1 [default = RED];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->member(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .SFPacketStore.TeamType Type = 1 [default = RED];
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SFPacketStore.TeamInfo.TeamMember Member = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->member_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->member(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.TeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void TeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&member_)->InternalSwap(CastToBase(&other->member_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomMember_Member::InitAsDefaultInstance() {
}
class RoomMember_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomMember_Member>()._has_bits_);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RoomMember_Member::RoomMember_Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.RoomMember.Member)
}
RoomMember_Member::RoomMember_Member(const RoomMember_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_member()) {
    member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.RoomMember.Member)
}

void RoomMember_Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomMember_Member_SFPacketStore_2eproto.base);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerindex_ = 0;
  type_ = -1;
}

RoomMember_Member::~RoomMember_Member() {
  // @@protoc_insertion_point(destructor:SFPacketStore.RoomMember.Member)
  SharedDtor();
}

void RoomMember_Member::SharedDtor() {
  member_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomMember_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMember_Member& RoomMember_Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomMember_Member_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void RoomMember_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.RoomMember.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    member_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    playerindex_ = 0;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomMember_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_member(), ptr, ctx, "SFPacketStore.RoomMember.Member.Member");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 PlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SFPacketStore.TeamType Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SFPacketStore::TeamType_IsValid(val))) {
            set_type(static_cast<::SFPacketStore::TeamType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomMember_Member::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.RoomMember.Member)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member().data(), static_cast<int>(this->member().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.RoomMember.Member.Member");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.RoomMember.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.RoomMember.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomMember_Member::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.RoomMember.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomMember.Member.Member");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.RoomMember.Member)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomMember_Member::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.RoomMember.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomMember.Member.Member");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.RoomMember.Member)
  return target;
}

size_t RoomMember_Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.RoomMember.Member)
  size_t total_size = 0;

  if (has_member()) {
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());
  }

  if (has_playerindex()) {
    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  if (has_type()) {
    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t RoomMember_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.RoomMember.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());

    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMember_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.RoomMember.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMember_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomMember_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.RoomMember.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.RoomMember.Member)
    MergeFrom(*source);
  }
}

void RoomMember_Member::MergeFrom(const RoomMember_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.RoomMember.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomMember_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.RoomMember.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMember_Member::CopyFrom(const RoomMember_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.RoomMember.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMember_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RoomMember_Member::InternalSwap(RoomMember_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.Swap(&other->member_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerindex_, other->playerindex_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMember_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomMember::InitAsDefaultInstance() {
}
class RoomMember::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomMember>()._has_bits_);
};

RoomMember::RoomMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.RoomMember)
}
RoomMember::RoomMember(const RoomMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.RoomMember)
}

void RoomMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomMember_SFPacketStore_2eproto.base);
}

RoomMember::~RoomMember() {
  // @@protoc_insertion_point(destructor:SFPacketStore.RoomMember)
  SharedDtor();
}

void RoomMember::SharedDtor() {
}

void RoomMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMember& RoomMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomMember_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void RoomMember::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.RoomMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SFPacketStore.RoomMember.Member Info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomMember::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.RoomMember)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.RoomMember.Member Info = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.RoomMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.RoomMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomMember::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.RoomMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.RoomMember)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.RoomMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.RoomMember)
  return target;
}

size_t RoomMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.RoomMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomMember.Member Info = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.RoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.RoomMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.RoomMember)
    MergeFrom(*source);
  }
}

void RoomMember::MergeFrom(const RoomMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.RoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void RoomMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.RoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMember::CopyFrom(const RoomMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.RoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMember::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void RoomMember::InternalSwap(RoomMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterTeamMember::InitAsDefaultInstance() {
}
class EnterTeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterTeamMember>()._has_bits_);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EnterTeamMember::EnterTeamMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.EnterTeamMember)
}
EnterTeamMember::EnterTeamMember(const EnterTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_member()) {
    member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.EnterTeamMember)
}

void EnterTeamMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterTeamMember_SFPacketStore_2eproto.base);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerindex_ = 0;
  type_ = -1;
}

EnterTeamMember::~EnterTeamMember() {
  // @@protoc_insertion_point(destructor:SFPacketStore.EnterTeamMember)
  SharedDtor();
}

void EnterTeamMember::SharedDtor() {
  member_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterTeamMember& EnterTeamMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterTeamMember_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void EnterTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.EnterTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    member_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    playerindex_ = 0;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnterTeamMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_member(), ptr, ctx, "SFPacketStore.EnterTeamMember.Member");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 PlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SFPacketStore.TeamType Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SFPacketStore::TeamType_IsValid(val))) {
            set_type(static_cast<::SFPacketStore::TeamType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnterTeamMember::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.EnterTeamMember)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member().data(), static_cast<int>(this->member().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.EnterTeamMember.Member");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.EnterTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.EnterTeamMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnterTeamMember::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.EnterTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.EnterTeamMember.Member");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.EnterTeamMember)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterTeamMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.EnterTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.EnterTeamMember.Member");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.EnterTeamMember)
  return target;
}

size_t EnterTeamMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.EnterTeamMember)
  size_t total_size = 0;

  if (has_member()) {
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());
  }

  if (has_playerindex()) {
    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  if (has_type()) {
    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t EnterTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.EnterTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());

    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterTeamMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.EnterTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterTeamMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterTeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.EnterTeamMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.EnterTeamMember)
    MergeFrom(*source);
  }
}

void EnterTeamMember::MergeFrom(const EnterTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.EnterTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterTeamMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.EnterTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTeamMember::CopyFrom(const EnterTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.EnterTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EnterTeamMember::InternalSwap(EnterTeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.Swap(&other->member_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerindex_, other->playerindex_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterTeamMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveTeamMember::InitAsDefaultInstance() {
}
class LeaveTeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveTeamMember>()._has_bits_);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LeaveTeamMember::LeaveTeamMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LeaveTeamMember)
}
LeaveTeamMember::LeaveTeamMember(const LeaveTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_member()) {
    member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LeaveTeamMember)
}

void LeaveTeamMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaveTeamMember_SFPacketStore_2eproto.base);
  member_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerindex_ = 0;
  type_ = -1;
}

LeaveTeamMember::~LeaveTeamMember() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LeaveTeamMember)
  SharedDtor();
}

void LeaveTeamMember::SharedDtor() {
  member_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaveTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveTeamMember& LeaveTeamMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveTeamMember_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LeaveTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LeaveTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    member_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    playerindex_ = 0;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaveTeamMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_member(), ptr, ctx, "SFPacketStore.LeaveTeamMember.Member");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 PlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SFPacketStore.TeamType Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SFPacketStore::TeamType_IsValid(val))) {
            set_type(static_cast<::SFPacketStore::TeamType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaveTeamMember::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LeaveTeamMember)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Member = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->member().data(), static_cast<int>(this->member().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.LeaveTeamMember.Member");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PlayerIndex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SFPacketStore.TeamType Type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SFPacketStore::TeamType_IsValid(value)) {
            set_type(static_cast< ::SFPacketStore::TeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LeaveTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LeaveTeamMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaveTeamMember::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LeaveTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.LeaveTeamMember.Member");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->member(), output);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->playerindex(), output);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LeaveTeamMember)
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveTeamMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LeaveTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->member().data(), static_cast<int>(this->member().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.LeaveTeamMember.Member");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->member(), target);
  }

  // required int32 PlayerIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->playerindex(), target);
  }

  // required .SFPacketStore.TeamType Type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LeaveTeamMember)
  return target;
}

size_t LeaveTeamMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.LeaveTeamMember)
  size_t total_size = 0;

  if (has_member()) {
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());
  }

  if (has_playerindex()) {
    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  if (has_type()) {
    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t LeaveTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LeaveTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Member = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->member());

    // required int32 PlayerIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

    // required .SFPacketStore.TeamType Type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveTeamMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LeaveTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveTeamMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveTeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LeaveTeamMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LeaveTeamMember)
    MergeFrom(*source);
  }
}

void LeaveTeamMember::MergeFrom(const LeaveTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LeaveTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      member_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveTeamMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LeaveTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveTeamMember::CopyFrom(const LeaveTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LeaveTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LeaveTeamMember::InternalSwap(LeaveTeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.Swap(&other->member_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerindex_, other->playerindex_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveTeamMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvalidPacket::InitAsDefaultInstance() {
}
class InvalidPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<InvalidPacket>()._has_bits_);
  static void set_has_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvalidPacket::InvalidPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.InvalidPacket)
}
InvalidPacket::InvalidPacket(const InvalidPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_arg()) {
    arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arg_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.InvalidPacket)
}

void InvalidPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvalidPacket_SFPacketStore_2eproto.base);
  arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvalidPacket::~InvalidPacket() {
  // @@protoc_insertion_point(destructor:SFPacketStore.InvalidPacket)
  SharedDtor();
}

void InvalidPacket::SharedDtor() {
  arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvalidPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvalidPacket& InvalidPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvalidPacket_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void InvalidPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.InvalidPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    arg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InvalidPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_arg(), ptr, ctx, "SFPacketStore.InvalidPacket.Arg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InvalidPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.InvalidPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Arg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_arg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg().data(), static_cast<int>(this->arg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.InvalidPacket.Arg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.InvalidPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.InvalidPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InvalidPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.InvalidPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Arg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg().data(), static_cast<int>(this->arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.InvalidPacket.Arg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->arg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.InvalidPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* InvalidPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.InvalidPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Arg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg().data(), static_cast<int>(this->arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.InvalidPacket.Arg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->arg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.InvalidPacket)
  return target;
}

size_t InvalidPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.InvalidPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string Arg = 1;
  if (has_arg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->arg());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvalidPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.InvalidPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const InvalidPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvalidPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.InvalidPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.InvalidPacket)
    MergeFrom(*source);
  }
}

void InvalidPacket::MergeFrom(const InvalidPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.InvalidPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arg()) {
    _has_bits_[0] |= 0x00000001u;
    arg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arg_);
  }
}

void InvalidPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.InvalidPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidPacket::CopyFrom(const InvalidPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.InvalidPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InvalidPacket::InternalSwap(InvalidPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arg_.Swap(&other->arg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterLobby::InitAsDefaultInstance() {
}
class EnterLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterLobby>()._has_bits_);
  static void set_has_lobbyindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnterLobby::EnterLobby()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.EnterLobby)
}
EnterLobby::EnterLobby(const EnterLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobbyindex_ = from.lobbyindex_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.EnterLobby)
}

void EnterLobby::SharedCtor() {
  lobbyindex_ = 0;
}

EnterLobby::~EnterLobby() {
  // @@protoc_insertion_point(destructor:SFPacketStore.EnterLobby)
  SharedDtor();
}

void EnterLobby::SharedDtor() {
}

void EnterLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterLobby& EnterLobby::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterLobby_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void EnterLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.EnterLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbyindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnterLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 LobbyIndex = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobbyindex(&has_bits);
          lobbyindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnterLobby::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.EnterLobby)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LobbyIndex = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_lobbyindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobbyindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.EnterLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.EnterLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnterLobby::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.EnterLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 LobbyIndex = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->lobbyindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.EnterLobby)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterLobby::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.EnterLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 LobbyIndex = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->lobbyindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.EnterLobby)
  return target;
}

size_t EnterLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.EnterLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 LobbyIndex = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lobbyindex());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.EnterLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.EnterLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.EnterLobby)
    MergeFrom(*source);
  }
}

void EnterLobby::MergeFrom(const EnterLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.EnterLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lobbyindex()) {
    set_lobbyindex(from.lobbyindex());
  }
}

void EnterLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.EnterLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterLobby::CopyFrom(const EnterLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.EnterLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterLobby::IsInitialized() const {
  return true;
}

void EnterLobby::InternalSwap(EnterLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobbyindex_, other->lobbyindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatReq::InitAsDefaultInstance() {
}
class ChatReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatReq>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatReq::ChatReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.ChatReq)
}
ChatReq::ChatReq(const ChatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.ChatReq)
}

void ChatReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatReq_SFPacketStore_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatReq::~ChatReq() {
  // @@protoc_insertion_point(destructor:SFPacketStore.ChatReq)
  SharedDtor();
}

void ChatReq::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatReq& ChatReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatReq_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void ChatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.ChatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "SFPacketStore.ChatReq.Message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.ChatReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.ChatReq.Message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.ChatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.ChatReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.ChatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatReq.Message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.ChatReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.ChatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatReq.Message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.ChatReq)
  return target;
}

size_t ChatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.ChatReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string Message = 1;
  if (has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.ChatReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.ChatReq)
    MergeFrom(*source);
  }
}

void ChatReq::MergeFrom(const ChatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ChatReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReq::CopyFrom(const ChatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChatReq::InternalSwap(ChatReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRes::InitAsDefaultInstance() {
}
class ChatRes::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRes>()._has_bits_);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatRes::ChatRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.ChatRes)
}
ChatRes::ChatRes(const ChatRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.ChatRes)
}

void ChatRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatRes_SFPacketStore_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatRes::~ChatRes() {
  // @@protoc_insertion_point(destructor:SFPacketStore.ChatRes)
  SharedDtor();
}

void ChatRes::SharedDtor() {
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRes& ChatRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRes_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void ChatRes::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.ChatRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sender_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sender(), ptr, ctx, "SFPacketStore.ChatRes.Sender");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "SFPacketStore.ChatRes.Message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.ChatRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Sender = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.ChatRes.Sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.ChatRes.Message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.ChatRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.ChatRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.ChatRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Sender = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatRes.Sender");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // required string Message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatRes.Message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.ChatRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.ChatRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Sender = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatRes.Sender");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required string Message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.ChatRes.Message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.ChatRes)
  return target;
}

size_t ChatRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.ChatRes)
  size_t total_size = 0;

  if (has_sender()) {
    // required string Sender = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender());
  }

  if (has_message()) {
    // required string Message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  return total_size;
}
size_t ChatRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.ChatRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Sender = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender());

    // required string Message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.ChatRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.ChatRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.ChatRes)
    MergeFrom(*source);
  }
}

void ChatRes::MergeFrom(const ChatRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.ChatRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
}

void ChatRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.ChatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRes::CopyFrom(const ChatRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.ChatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChatRes::InternalSwap(ChatRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterRoom::InitAsDefaultInstance() {
}
class EnterRoom::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterRoom>()._has_bits_);
  static void set_has_roomindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnterRoom::EnterRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.EnterRoom)
}
EnterRoom::EnterRoom(const EnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&roomindex_, &from.roomindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.EnterRoom)
}

void EnterRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterRoom_SFPacketStore_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemode_) -
      reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
}

EnterRoom::~EnterRoom() {
  // @@protoc_insertion_point(destructor:SFPacketStore.EnterRoom)
  SharedDtor();
}

void EnterRoom::SharedDtor() {
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoom& EnterRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoom_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void EnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.EnterRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&roomindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamemode_) -
        reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnterRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 RoomIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_roomindex(&has_bits);
          roomindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 GameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gamemode(&has_bits);
          gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_password(), ptr, ctx, "SFPacketStore.EnterRoom.Password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnterRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.EnterRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_roomindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 GameMode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_gamemode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.EnterRoom.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.EnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.EnterRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnterRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.EnterRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RoomIndex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required int32 GameMode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->gamemode(), output);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.EnterRoom.Password");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.EnterRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.EnterRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RoomIndex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required int32 GameMode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->gamemode(), target);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.EnterRoom.Password");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.EnterRoom)
  return target;
}

size_t EnterRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.EnterRoom)
  size_t total_size = 0;

  if (has_roomindex()) {
    // required int32 RoomIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }

  if (has_gamemode()) {
    // required int32 GameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gamemode());
  }

  return total_size;
}
size_t EnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.EnterRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 RoomIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->roomindex());

    // required int32 GameMode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string Password = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.EnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.EnterRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.EnterRoom)
    MergeFrom(*source);
  }
}

void EnterRoom::MergeFrom(const EnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.EnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.EnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoom::CopyFrom(const EnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.EnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void EnterRoom::InternalSwap(EnterRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomindex_, other->roomindex_);
  swap(gamemode_, other->gamemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoom::InitAsDefaultInstance() {
}
class CreateRoom::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRoom>()._has_bits_);
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateRoom::CreateRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.CreateRoom)
}
CreateRoom::CreateRoom(const CreateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  gamemode_ = from.gamemode_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.CreateRoom)
}

void CreateRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoom_SFPacketStore_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamemode_ = 0;
}

CreateRoom::~CreateRoom() {
  // @@protoc_insertion_point(destructor:SFPacketStore.CreateRoom)
  SharedDtor();
}

void CreateRoom::SharedDtor() {
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoom& CreateRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoom_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.CreateRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  gamemode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 GameMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gamemode(&has_bits);
          gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_password(), ptr, ctx, "SFPacketStore.CreateRoom.Password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.CreateRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameMode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_gamemode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.CreateRoom.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.CreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.CreateRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.CreateRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GameMode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->gamemode(), output);
  }

  // optional string Password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.CreateRoom.Password");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.CreateRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.CreateRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GameMode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->gamemode(), target);
  }

  // optional string Password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.CreateRoom.Password");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.CreateRoom)
  return target;
}

size_t CreateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.CreateRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 GameMode = 1;
  if (has_gamemode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gamemode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string Password = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.CreateRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.CreateRoom)
    MergeFrom(*source);
  }
}

void CreateRoom::MergeFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CreateRoom::InternalSwap(CreateRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamemode_, other->gamemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveRoom::InitAsDefaultInstance() {
}
class LeaveRoom::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveRoom>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaveRoom::LeaveRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LeaveRoom)
}
LeaveRoom::LeaveRoom(const LeaveRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LeaveRoom)
}

void LeaveRoom::SharedCtor() {
  reason_ = 0;
}

LeaveRoom::~LeaveRoom() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LeaveRoom)
  SharedDtor();
}

void LeaveRoom::SharedDtor() {
}

void LeaveRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveRoom& LeaveRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveRoom_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LeaveRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LeaveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaveRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 Reason = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaveRoom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LeaveRoom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Reason = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_reason(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LeaveRoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaveRoom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LeaveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Reason = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LeaveRoom)
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveRoom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LeaveRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 Reason = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LeaveRoom)
  return target;
}

size_t LeaveRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LeaveRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 Reason = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LeaveRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LeaveRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LeaveRoom)
    MergeFrom(*source);
  }
}

void LeaveRoom::MergeFrom(const LeaveRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LeaveRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_reason(from.reason());
  }
}

void LeaveRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LeaveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoom::CopyFrom(const LeaveRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LeaveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoom::IsInitialized() const {
  return true;
}

void LeaveRoom::InternalSwap(LeaveRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomList_RoomInfo::InitAsDefaultInstance() {
}
class RoomList_RoomInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomList_RoomInfo>()._has_bits_);
  static void set_has_roomindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roomname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roomchief(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_usercount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxusercount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_needpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RoomList_RoomInfo::RoomList_RoomInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.RoomList.RoomInfo)
}
RoomList_RoomInfo::RoomList_RoomInfo(const RoomList_RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomname()) {
    roomname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  roomchief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomchief()) {
    roomchief_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomchief_);
  }
  ::memcpy(&roomindex_, &from.roomindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.RoomList.RoomInfo)
}

void RoomList_RoomInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomList_RoomInfo_SFPacketStore_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomchief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemode_) -
      reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
}

RoomList_RoomInfo::~RoomList_RoomInfo() {
  // @@protoc_insertion_point(destructor:SFPacketStore.RoomList.RoomInfo)
  SharedDtor();
}

void RoomList_RoomInfo::SharedDtor() {
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomchief_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomList_RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomList_RoomInfo& RoomList_RoomInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomList_RoomInfo_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void RoomList_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.RoomList.RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      roomname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      roomchief_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&roomindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamemode_) -
        reinterpret_cast<char*>(&roomindex_)) + sizeof(gamemode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomList_RoomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 RoomIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_roomindex(&has_bits);
          roomindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string RoomName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_roomname(), ptr, ctx, "SFPacketStore.RoomList.RoomInfo.RoomName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string RoomChief = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_roomchief(), ptr, ctx, "SFPacketStore.RoomList.RoomInfo.RoomChief");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 UserCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_usercount(&has_bits);
          usercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 MaxUserCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxusercount(&has_bits);
          maxusercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 NeedPassword = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_needpassword(&has_bits);
          needpassword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 GameMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gamemode(&has_bits);
          gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomList_RoomInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.RoomList.RoomInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RoomIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_roomindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string RoomName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.RoomList.RoomInfo.RoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string RoomChief = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomchief()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomchief().data(), static_cast<int>(this->roomchief().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.RoomList.RoomInfo.RoomChief");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 UserCount = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_usercount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MaxUserCount = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_maxusercount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxusercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 NeedPassword = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_needpassword(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &needpassword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 GameMode = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_gamemode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.RoomList.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.RoomList.RoomInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomList_RoomInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.RoomList.RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RoomIndex = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required string RoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomList.RoomInfo.RoomName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // required string RoomChief = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomchief().data(), static_cast<int>(this->roomchief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomList.RoomInfo.RoomChief");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomchief(), output);
  }

  // required int32 UserCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->usercount(), output);
  }

  // required int32 MaxUserCount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->maxusercount(), output);
  }

  // required int32 NeedPassword = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->needpassword(), output);
  }

  // required int32 GameMode = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->gamemode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.RoomList.RoomInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomList_RoomInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.RoomList.RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RoomIndex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required string RoomName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomList.RoomInfo.RoomName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required string RoomChief = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomchief().data(), static_cast<int>(this->roomchief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.RoomList.RoomInfo.RoomChief");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->roomchief(), target);
  }

  // required int32 UserCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->usercount(), target);
  }

  // required int32 MaxUserCount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->maxusercount(), target);
  }

  // required int32 NeedPassword = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->needpassword(), target);
  }

  // required int32 GameMode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->gamemode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.RoomList.RoomInfo)
  return target;
}

size_t RoomList_RoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.RoomList.RoomInfo)
  size_t total_size = 0;

  if (has_roomname()) {
    // required string RoomName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  if (has_roomchief()) {
    // required string RoomChief = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomchief());
  }

  if (has_roomindex()) {
    // required int32 RoomIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }

  if (has_usercount()) {
    // required int32 UserCount = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->usercount());
  }

  if (has_maxusercount()) {
    // required int32 MaxUserCount = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxusercount());
  }

  if (has_needpassword()) {
    // required int32 NeedPassword = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->needpassword());
  }

  if (has_gamemode()) {
    // required int32 GameMode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gamemode());
  }

  return total_size;
}
size_t RoomList_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.RoomList.RoomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string RoomName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomname());

    // required string RoomChief = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomchief());

    // required int32 RoomIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->roomindex());

    // required int32 UserCount = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->usercount());

    // required int32 MaxUserCount = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxusercount());

    // required int32 NeedPassword = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->needpassword());

    // required int32 GameMode = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomList_RoomInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.RoomList.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomList_RoomInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomList_RoomInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.RoomList.RoomInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.RoomList.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomList_RoomInfo::MergeFrom(const RoomList_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.RoomList.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      roomname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      roomchief_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomchief_);
    }
    if (cached_has_bits & 0x00000004u) {
      roomindex_ = from.roomindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      usercount_ = from.usercount_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxusercount_ = from.maxusercount_;
    }
    if (cached_has_bits & 0x00000020u) {
      needpassword_ = from.needpassword_;
    }
    if (cached_has_bits & 0x00000040u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomList_RoomInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.RoomList.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomList_RoomInfo::CopyFrom(const RoomList_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.RoomList.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList_RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void RoomList_RoomInfo::InternalSwap(RoomList_RoomInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomchief_.Swap(&other->roomchief_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomindex_, other->roomindex_);
  swap(usercount_, other->usercount_);
  swap(maxusercount_, other->maxusercount_);
  swap(needpassword_, other->needpassword_);
  swap(gamemode_, other->gamemode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomList_RoomInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomList::InitAsDefaultInstance() {
}
class RoomList::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomList>()._has_bits_);
};

RoomList::RoomList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.RoomList)
}
RoomList::RoomList(const RoomList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.RoomList)
}

void RoomList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomList_SFPacketStore_2eproto.base);
}

RoomList::~RoomList() {
  // @@protoc_insertion_point(destructor:SFPacketStore.RoomList)
  SharedDtor();
}

void RoomList::SharedDtor() {
}

void RoomList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomList& RoomList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomList_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void RoomList::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.RoomList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.RoomList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.RoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.RoomList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.RoomList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.RoomList)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.RoomList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.RoomList)
  return target;
}

size_t RoomList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.RoomList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SFPacketStore.RoomList.RoomInfo Info = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.RoomList)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.RoomList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.RoomList)
    MergeFrom(*source);
  }
}

void RoomList::MergeFrom(const RoomList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.RoomList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void RoomList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.RoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomList::CopyFrom(const RoomList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.RoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void RoomList::InternalSwap(RoomList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomListRefresh::InitAsDefaultInstance() {
}
class RoomListRefresh::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomListRefresh>()._has_bits_);
};

RoomListRefresh::RoomListRefresh()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.RoomListRefresh)
}
RoomListRefresh::RoomListRefresh(const RoomListRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.RoomListRefresh)
}

void RoomListRefresh::SharedCtor() {
}

RoomListRefresh::~RoomListRefresh() {
  // @@protoc_insertion_point(destructor:SFPacketStore.RoomListRefresh)
  SharedDtor();
}

void RoomListRefresh::SharedDtor() {
}

void RoomListRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomListRefresh& RoomListRefresh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomListRefresh_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void RoomListRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.RoomListRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomListRefresh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomListRefresh::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.RoomListRefresh)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.RoomListRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.RoomListRefresh)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomListRefresh::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.RoomListRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.RoomListRefresh)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomListRefresh::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.RoomListRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.RoomListRefresh)
  return target;
}

size_t RoomListRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.RoomListRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomListRefresh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.RoomListRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomListRefresh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomListRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.RoomListRefresh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.RoomListRefresh)
    MergeFrom(*source);
  }
}

void RoomListRefresh::MergeFrom(const RoomListRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.RoomListRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoomListRefresh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.RoomListRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListRefresh::CopyFrom(const RoomListRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.RoomListRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListRefresh::IsInitialized() const {
  return true;
}

void RoomListRefresh::InternalSwap(RoomListRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomListRefresh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeTeam::InitAsDefaultInstance() {
}
class ChangeTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeTeam>()._has_bits_);
};

ChangeTeam::ChangeTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.ChangeTeam)
}
ChangeTeam::ChangeTeam(const ChangeTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.ChangeTeam)
}

void ChangeTeam::SharedCtor() {
}

ChangeTeam::~ChangeTeam() {
  // @@protoc_insertion_point(destructor:SFPacketStore.ChangeTeam)
  SharedDtor();
}

void ChangeTeam::SharedDtor() {
}

void ChangeTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeTeam& ChangeTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeTeam_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void ChangeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.ChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.ChangeTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.ChangeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.ChangeTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.ChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.ChangeTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.ChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.ChangeTeam)
  return target;
}

size_t ChangeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.ChangeTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.ChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.ChangeTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.ChangeTeam)
    MergeFrom(*source);
  }
}

void ChangeTeam::MergeFrom(const ChangeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.ChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChangeTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.ChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTeam::CopyFrom(const ChangeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.ChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTeam::IsInitialized() const {
  return true;
}

void ChangeTeam::InternalSwap(ChangeTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadingStart::InitAsDefaultInstance() {
}
class LoadingStart::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadingStart>()._has_bits_);
};

LoadingStart::LoadingStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LoadingStart)
}
LoadingStart::LoadingStart(const LoadingStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LoadingStart)
}

void LoadingStart::SharedCtor() {
}

LoadingStart::~LoadingStart() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LoadingStart)
  SharedDtor();
}

void LoadingStart::SharedDtor() {
}

void LoadingStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadingStart& LoadingStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadingStart_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LoadingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LoadingStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadingStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadingStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LoadingStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LoadingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LoadingStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadingStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LoadingStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LoadingStart)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadingStart::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LoadingStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LoadingStart)
  return target;
}

size_t LoadingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LoadingStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadingStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LoadingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadingStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadingStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LoadingStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LoadingStart)
    MergeFrom(*source);
  }
}

void LoadingStart::MergeFrom(const LoadingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LoadingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoadingStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LoadingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadingStart::CopyFrom(const LoadingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LoadingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadingStart::IsInitialized() const {
  return true;
}

void LoadingStart::InternalSwap(LoadingStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadingStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadingComplete::InitAsDefaultInstance() {
}
class LoadingComplete::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadingComplete>()._has_bits_);
};

LoadingComplete::LoadingComplete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.LoadingComplete)
}
LoadingComplete::LoadingComplete(const LoadingComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.LoadingComplete)
}

void LoadingComplete::SharedCtor() {
}

LoadingComplete::~LoadingComplete() {
  // @@protoc_insertion_point(destructor:SFPacketStore.LoadingComplete)
  SharedDtor();
}

void LoadingComplete::SharedDtor() {
}

void LoadingComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadingComplete& LoadingComplete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadingComplete_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void LoadingComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.LoadingComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadingComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadingComplete::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.LoadingComplete)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.LoadingComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.LoadingComplete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadingComplete::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.LoadingComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.LoadingComplete)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadingComplete::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.LoadingComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.LoadingComplete)
  return target;
}

size_t LoadingComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.LoadingComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadingComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.LoadingComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadingComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadingComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.LoadingComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.LoadingComplete)
    MergeFrom(*source);
  }
}

void LoadingComplete::MergeFrom(const LoadingComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.LoadingComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoadingComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.LoadingComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadingComplete::CopyFrom(const LoadingComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.LoadingComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadingComplete::IsInitialized() const {
  return true;
}

void LoadingComplete::InternalSwap(LoadingComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadingComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayStart::InitAsDefaultInstance() {
}
class PlayStart::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayStart>()._has_bits_);
};

PlayStart::PlayStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PlayStart)
}
PlayStart::PlayStart(const PlayStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PlayStart)
}

void PlayStart::SharedCtor() {
}

PlayStart::~PlayStart() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PlayStart)
  SharedDtor();
}

void PlayStart::SharedDtor() {
}

void PlayStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayStart& PlayStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayStart_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PlayStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PlayStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PlayStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PlayStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PlayStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PlayStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PlayStart)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayStart::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PlayStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PlayStart)
  return target;
}

size_t PlayStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PlayStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PlayStart)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PlayStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PlayStart)
    MergeFrom(*source);
  }
}

void PlayStart::MergeFrom(const PlayStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PlayStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PlayStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayStart::CopyFrom(const PlayStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PlayStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayStart::IsInitialized() const {
  return true;
}

void PlayStart::InternalSwap(PlayStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayMove::InitAsDefaultInstance() {
}
class PlayMove::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayMove>()._has_bits_);
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayMove::PlayMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PlayMove)
}
PlayMove::PlayMove(const PlayMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&posz_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PlayMove)
}

void PlayMove::SharedCtor() {
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posz_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
}

PlayMove::~PlayMove() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PlayMove)
  SharedDtor();
}

void PlayMove::SharedDtor() {
}

void PlayMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayMove& PlayMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayMove_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PlayMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PlayMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&posx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posz_) -
        reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float PosX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float PosY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float PosZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_posz(&has_bits);
          posz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayMove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PlayMove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float PosX = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_posx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float PosY = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_posy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float PosZ = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_posz(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PlayMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PlayMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayMove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PlayMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float PosX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }

  // required float PosY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }

  // required float PosZ = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->posz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PlayMove)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PlayMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float PosX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }

  // required float PosY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }

  // required float PosZ = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->posz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PlayMove)
  return target;
}

size_t PlayMove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.PlayMove)
  size_t total_size = 0;

  if (has_posx()) {
    // required float PosX = 1;
    total_size += 1 + 4;
  }

  if (has_posy()) {
    // required float PosY = 2;
    total_size += 1 + 4;
  }

  if (has_posz()) {
    // required float PosZ = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PlayMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PlayMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float PosX = 1;
    total_size += 1 + 4;

    // required float PosY = 2;
    total_size += 1 + 4;

    // required float PosZ = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PlayMove)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PlayMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PlayMove)
    MergeFrom(*source);
  }
}

void PlayMove::MergeFrom(const PlayMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PlayMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      posz_ = from.posz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PlayMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayMove::CopyFrom(const PlayMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PlayMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PlayMove::InternalSwap(PlayMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(posz_, other->posz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayEnd::InitAsDefaultInstance() {
}
class PlayEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayEnd>()._has_bits_);
};

PlayEnd::PlayEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PlayEnd)
}
PlayEnd::PlayEnd(const PlayEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PlayEnd)
}

void PlayEnd::SharedCtor() {
}

PlayEnd::~PlayEnd() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PlayEnd)
  SharedDtor();
}

void PlayEnd::SharedDtor() {
}

void PlayEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayEnd& PlayEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayEnd_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PlayEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PlayEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayEnd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PlayEnd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PlayEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PlayEnd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayEnd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PlayEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PlayEnd)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayEnd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PlayEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PlayEnd)
  return target;
}

size_t PlayEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PlayEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PlayEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PlayEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PlayEnd)
    MergeFrom(*source);
  }
}

void PlayEnd::MergeFrom(const PlayEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PlayEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PlayEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayEnd::CopyFrom(const PlayEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PlayEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayEnd::IsInitialized() const {
  return true;
}

void PlayEnd::InternalSwap(PlayEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayScoreInfo::InitAsDefaultInstance() {
}
class PlayScoreInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayScoreInfo>()._has_bits_);
  static void set_has_redkillcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bluekillcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayScoreInfo::PlayScoreInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PlayScoreInfo)
}
PlayScoreInfo::PlayScoreInfo(const PlayScoreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&redkillcount_, &from.redkillcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&bluekillcount_) -
    reinterpret_cast<char*>(&redkillcount_)) + sizeof(bluekillcount_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PlayScoreInfo)
}

void PlayScoreInfo::SharedCtor() {
  ::memset(&redkillcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bluekillcount_) -
      reinterpret_cast<char*>(&redkillcount_)) + sizeof(bluekillcount_));
}

PlayScoreInfo::~PlayScoreInfo() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PlayScoreInfo)
  SharedDtor();
}

void PlayScoreInfo::SharedDtor() {
}

void PlayScoreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayScoreInfo& PlayScoreInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayScoreInfo_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PlayScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PlayScoreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&redkillcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bluekillcount_) -
        reinterpret_cast<char*>(&redkillcount_)) + sizeof(bluekillcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayScoreInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 RedKillCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_redkillcount(&has_bits);
          redkillcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 BlueKillCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bluekillcount(&has_bits);
          bluekillcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayScoreInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PlayScoreInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RedKillCount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_redkillcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &redkillcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 BlueKillCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bluekillcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluekillcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PlayScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PlayScoreInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayScoreInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PlayScoreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RedKillCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->redkillcount(), output);
  }

  // required int32 BlueKillCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->bluekillcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PlayScoreInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayScoreInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PlayScoreInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 RedKillCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->redkillcount(), target);
  }

  // required int32 BlueKillCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->bluekillcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PlayScoreInfo)
  return target;
}

size_t PlayScoreInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.PlayScoreInfo)
  size_t total_size = 0;

  if (has_redkillcount()) {
    // required int32 RedKillCount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->redkillcount());
  }

  if (has_bluekillcount()) {
    // required int32 BlueKillCount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bluekillcount());
  }

  return total_size;
}
size_t PlayScoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PlayScoreInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 RedKillCount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->redkillcount());

    // required int32 BlueKillCount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bluekillcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayScoreInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PlayScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayScoreInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayScoreInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PlayScoreInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PlayScoreInfo)
    MergeFrom(*source);
  }
}

void PlayScoreInfo::MergeFrom(const PlayScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PlayScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      redkillcount_ = from.redkillcount_;
    }
    if (cached_has_bits & 0x00000002u) {
      bluekillcount_ = from.bluekillcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayScoreInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PlayScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayScoreInfo::CopyFrom(const PlayScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PlayScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayScoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayScoreInfo::InternalSwap(PlayScoreInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(redkillcount_, other->redkillcount_);
  swap(bluekillcount_, other->bluekillcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayScoreInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayPlayerScore::InitAsDefaultInstance() {
}
class PlayPlayerScore::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayPlayerScore>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_death(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlayPlayerScore::PlayPlayerScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PlayPlayerScore)
}
PlayPlayerScore::PlayPlayerScore(const PlayPlayerScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&teamtype_, &from.teamtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_) -
    reinterpret_cast<char*>(&teamtype_)) + sizeof(death_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PlayPlayerScore)
}

void PlayPlayerScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayPlayerScore_SFPacketStore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&teamtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_) -
      reinterpret_cast<char*>(&teamtype_)) + sizeof(death_));
}

PlayPlayerScore::~PlayPlayerScore() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PlayPlayerScore)
  SharedDtor();
}

void PlayPlayerScore::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayPlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayPlayerScore& PlayPlayerScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayPlayerScore_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PlayPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PlayPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&teamtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_) -
        reinterpret_cast<char*>(&teamtype_)) + sizeof(death_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayPlayerScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "SFPacketStore.PlayPlayerScore.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 teamtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_teamtype(&has_bits);
          teamtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kill(&has_bits);
          kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 death = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_death(&has_bits);
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayPlayerScore::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PlayPlayerScore)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SFPacketStore.PlayPlayerScore.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 teamtype = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_teamtype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 kill = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_kill(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 death = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_death(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PlayPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PlayPlayerScore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayPlayerScore::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PlayPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.PlayPlayerScore.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 teamtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->teamtype(), output);
  }

  // required int32 kill = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->kill(), output);
  }

  // required int32 death = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->death(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PlayPlayerScore)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayPlayerScore::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PlayPlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SFPacketStore.PlayPlayerScore.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 teamtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->teamtype(), target);
  }

  // required int32 kill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->kill(), target);
  }

  // required int32 death = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->death(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PlayPlayerScore)
  return target;
}

size_t PlayPlayerScore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.PlayPlayerScore)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_teamtype()) {
    // required int32 teamtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->teamtype());
  }

  if (has_kill()) {
    // required int32 kill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->kill());
  }

  if (has_death()) {
    // required int32 death = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->death());
  }

  return total_size;
}
size_t PlayPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PlayPlayerScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 teamtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->teamtype());

    // required int32 kill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->kill());

    // required int32 death = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->death());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayPlayerScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PlayPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayPlayerScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayPlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PlayPlayerScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PlayPlayerScore)
    MergeFrom(*source);
  }
}

void PlayPlayerScore::MergeFrom(const PlayPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PlayPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      teamtype_ = from.teamtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      kill_ = from.kill_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_ = from.death_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayPlayerScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PlayPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayPlayerScore::CopyFrom(const PlayPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PlayPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayPlayerScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PlayPlayerScore::InternalSwap(PlayPlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(teamtype_, other->teamtype_);
  swap(kill_, other->kill_);
  swap(death_, other->death_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayPlayerScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerList_PeerInfo::InitAsDefaultInstance() {
}
class PeerList_PeerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerList_PeerInfo>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PeerList_PeerInfo::PeerList_PeerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PeerList.PeerInfo)
}
PeerList_PeerInfo::PeerList_PeerInfo(const PeerList_PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  serial_ = from.serial_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PeerList.PeerInfo)
}

void PeerList_PeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerList_PeerInfo_SFPacketStore_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_ = 0;
}

PeerList_PeerInfo::~PeerList_PeerInfo() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PeerList.PeerInfo)
  SharedDtor();
}

void PeerList_PeerInfo::SharedDtor() {
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerList_PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerList_PeerInfo& PeerList_PeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerList_PeerInfo_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PeerList_PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PeerList.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    info_.ClearNonDefaultToEmptyNoArena();
  }
  serial_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerList_PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes Info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerList_PeerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PeerList.PeerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_serial(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes Info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PeerList.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PeerList.PeerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerList_PeerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PeerList.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serial = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // required bytes Info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PeerList.PeerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerList_PeerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PeerList.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serial = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // required bytes Info = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PeerList.PeerInfo)
  return target;
}

size_t PeerList_PeerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.PeerList.PeerInfo)
  size_t total_size = 0;

  if (has_info()) {
    // required bytes Info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->info());
  }

  if (has_serial()) {
    // required int32 serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  return total_size;
}
size_t PeerList_PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PeerList.PeerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes Info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->info());

    // required int32 serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerList_PeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PeerList.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerList_PeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerList_PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PeerList.PeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PeerList.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerList_PeerInfo::MergeFrom(const PeerList_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PeerList.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000002u) {
      serial_ = from.serial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeerList_PeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PeerList.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerList_PeerInfo::CopyFrom(const PeerList_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PeerList.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerList_PeerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PeerList_PeerInfo::InternalSwap(PeerList_PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_, other->serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerList_PeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerList::InitAsDefaultInstance() {
}
class PeerList::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerList>()._has_bits_);
};

PeerList::PeerList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PeerList)
}
PeerList::PeerList(const PeerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      peer_(from.peer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PeerList)
}

void PeerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerList_SFPacketStore_2eproto.base);
}

PeerList::~PeerList() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PeerList)
  SharedDtor();
}

void PeerList::SharedDtor() {
}

void PeerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerList& PeerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerList_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PeerList::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PeerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_peer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PeerList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PeerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PeerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PeerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->peer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PeerList)
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PeerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->peer(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PeerList)
  return target;
}

size_t PeerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PeerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SFPacketStore.PeerList.PeerInfo Peer = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->peer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->peer(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PeerList)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PeerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PeerList)
    MergeFrom(*source);
  }
}

void PeerList::MergeFrom(const PeerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PeerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_.MergeFrom(from.peer_);
}

void PeerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PeerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerList::CopyFrom(const PeerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PeerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->peer())) return false;
  return true;
}

void PeerList::InternalSwap(PeerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&peer_)->InternalSwap(CastToBase(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_CREATE_PLAYER::InitAsDefaultInstance() {
}
class MSG_CREATE_PLAYER::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_CREATE_PLAYER>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spawnindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_CREATE_PLAYER::MSG_CREATE_PLAYER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.MSG_CREATE_PLAYER)
}
MSG_CREATE_PLAYER::MSG_CREATE_PLAYER(const MSG_CREATE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&spawnindex_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(spawnindex_));
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.MSG_CREATE_PLAYER)
}

void MSG_CREATE_PLAYER::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spawnindex_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(spawnindex_));
}

MSG_CREATE_PLAYER::~MSG_CREATE_PLAYER() {
  // @@protoc_insertion_point(destructor:SFPacketStore.MSG_CREATE_PLAYER)
  SharedDtor();
}

void MSG_CREATE_PLAYER::SharedDtor() {
}

void MSG_CREATE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_CREATE_PLAYER& MSG_CREATE_PLAYER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_CREATE_PLAYER_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void MSG_CREATE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.MSG_CREATE_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&serial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spawnindex_) -
        reinterpret_cast<char*>(&serial_)) + sizeof(spawnindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_CREATE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 Serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 spawnindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spawnindex(&has_bits);
          spawnindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_CREATE_PLAYER::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.MSG_CREATE_PLAYER)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_serial(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 spawnindex = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_spawnindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &spawnindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.MSG_CREATE_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.MSG_CREATE_PLAYER)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_CREATE_PLAYER::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.MSG_CREATE_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // required int32 spawnindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->spawnindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.MSG_CREATE_PLAYER)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_CREATE_PLAYER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.MSG_CREATE_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // required int32 spawnindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->spawnindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.MSG_CREATE_PLAYER)
  return target;
}

size_t MSG_CREATE_PLAYER::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SFPacketStore.MSG_CREATE_PLAYER)
  size_t total_size = 0;

  if (has_serial()) {
    // required int32 Serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  if (has_spawnindex()) {
    // required int32 spawnindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->spawnindex());
  }

  return total_size;
}
size_t MSG_CREATE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.MSG_CREATE_PLAYER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());

    // required int32 spawnindex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->spawnindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_CREATE_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.MSG_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_CREATE_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_CREATE_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.MSG_CREATE_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.MSG_CREATE_PLAYER)
    MergeFrom(*source);
  }
}

void MSG_CREATE_PLAYER::MergeFrom(const MSG_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.MSG_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_ = from.serial_;
    }
    if (cached_has_bits & 0x00000002u) {
      spawnindex_ = from.spawnindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_CREATE_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.MSG_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CREATE_PLAYER::CopyFrom(const MSG_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.MSG_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CREATE_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MSG_CREATE_PLAYER::InternalSwap(MSG_CREATE_PLAYER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(serial_, other->serial_);
  swap(spawnindex_, other->spawnindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CREATE_PLAYER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_DESTROY_PLAYER::InitAsDefaultInstance() {
}
class MSG_DESTROY_PLAYER::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_DESTROY_PLAYER>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_DESTROY_PLAYER::MSG_DESTROY_PLAYER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.MSG_DESTROY_PLAYER)
}
MSG_DESTROY_PLAYER::MSG_DESTROY_PLAYER(const MSG_DESTROY_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_ = from.serial_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.MSG_DESTROY_PLAYER)
}

void MSG_DESTROY_PLAYER::SharedCtor() {
  serial_ = 0;
}

MSG_DESTROY_PLAYER::~MSG_DESTROY_PLAYER() {
  // @@protoc_insertion_point(destructor:SFPacketStore.MSG_DESTROY_PLAYER)
  SharedDtor();
}

void MSG_DESTROY_PLAYER::SharedDtor() {
}

void MSG_DESTROY_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_DESTROY_PLAYER& MSG_DESTROY_PLAYER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_DESTROY_PLAYER_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void MSG_DESTROY_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.MSG_DESTROY_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MSG_DESTROY_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 Serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MSG_DESTROY_PLAYER::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.MSG_DESTROY_PLAYER)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_serial(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.MSG_DESTROY_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.MSG_DESTROY_PLAYER)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MSG_DESTROY_PLAYER::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.MSG_DESTROY_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.MSG_DESTROY_PLAYER)
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_DESTROY_PLAYER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.MSG_DESTROY_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.MSG_DESTROY_PLAYER)
  return target;
}

size_t MSG_DESTROY_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.MSG_DESTROY_PLAYER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 Serial = 1;
  if (has_serial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_DESTROY_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.MSG_DESTROY_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_DESTROY_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_DESTROY_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.MSG_DESTROY_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.MSG_DESTROY_PLAYER)
    MergeFrom(*source);
  }
}

void MSG_DESTROY_PLAYER::MergeFrom(const MSG_DESTROY_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.MSG_DESTROY_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serial()) {
    set_serial(from.serial());
  }
}

void MSG_DESTROY_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.MSG_DESTROY_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DESTROY_PLAYER::CopyFrom(const MSG_DESTROY_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.MSG_DESTROY_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DESTROY_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_DESTROY_PLAYER::InternalSwap(MSG_DESTROY_PLAYER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(serial_, other->serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_DESTROY_PLAYER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLAYER_IP::InitAsDefaultInstance() {
}
class PLAYER_IP::_Internal {
 public:
  using HasBits = decltype(std::declval<PLAYER_IP>()._has_bits_);
  static void set_has_playerip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PLAYER_IP::PLAYER_IP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.PLAYER_IP)
}
PLAYER_IP::PLAYER_IP(const PLAYER_IP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerip()) {
    playerip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerip_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.PLAYER_IP)
}

void PLAYER_IP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PLAYER_IP_SFPacketStore_2eproto.base);
  playerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PLAYER_IP::~PLAYER_IP() {
  // @@protoc_insertion_point(destructor:SFPacketStore.PLAYER_IP)
  SharedDtor();
}

void PLAYER_IP::SharedDtor() {
  playerip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PLAYER_IP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLAYER_IP& PLAYER_IP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLAYER_IP_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void PLAYER_IP::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.PLAYER_IP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playerip_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PLAYER_IP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes playerip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_playerip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PLAYER_IP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.PLAYER_IP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes playerip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playerip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.PLAYER_IP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.PLAYER_IP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PLAYER_IP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.PLAYER_IP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes playerip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->playerip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.PLAYER_IP)
}

::PROTOBUF_NAMESPACE_ID::uint8* PLAYER_IP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.PLAYER_IP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes playerip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->playerip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.PLAYER_IP)
  return target;
}

size_t PLAYER_IP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.PLAYER_IP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes playerip = 1;
  if (has_playerip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->playerip());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLAYER_IP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.PLAYER_IP)
  GOOGLE_DCHECK_NE(&from, this);
  const PLAYER_IP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLAYER_IP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.PLAYER_IP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.PLAYER_IP)
    MergeFrom(*source);
  }
}

void PLAYER_IP::MergeFrom(const PLAYER_IP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.PLAYER_IP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerip()) {
    _has_bits_[0] |= 0x00000001u;
    playerip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerip_);
  }
}

void PLAYER_IP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.PLAYER_IP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLAYER_IP::CopyFrom(const PLAYER_IP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.PLAYER_IP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLAYER_IP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PLAYER_IP::InternalSwap(PLAYER_IP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerip_.Swap(&other->playerip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PLAYER_IP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ADD_PEER::InitAsDefaultInstance() {
}
class ADD_PEER::_Internal {
 public:
  using HasBits = decltype(std::declval<ADD_PEER>()._has_bits_);
  static void set_has_addpeer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ADD_PEER::ADD_PEER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.ADD_PEER)
}
ADD_PEER::ADD_PEER(const ADD_PEER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addpeer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_addpeer()) {
    addpeer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addpeer_);
  }
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.ADD_PEER)
}

void ADD_PEER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ADD_PEER_SFPacketStore_2eproto.base);
  addpeer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ADD_PEER::~ADD_PEER() {
  // @@protoc_insertion_point(destructor:SFPacketStore.ADD_PEER)
  SharedDtor();
}

void ADD_PEER::SharedDtor() {
  addpeer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ADD_PEER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADD_PEER& ADD_PEER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ADD_PEER_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void ADD_PEER::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.ADD_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addpeer_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADD_PEER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes addpeer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_addpeer(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADD_PEER::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.ADD_PEER)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes addpeer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addpeer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.ADD_PEER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.ADD_PEER)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADD_PEER::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.ADD_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes addpeer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->addpeer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.ADD_PEER)
}

::PROTOBUF_NAMESPACE_ID::uint8* ADD_PEER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.ADD_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes addpeer = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->addpeer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.ADD_PEER)
  return target;
}

size_t ADD_PEER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.ADD_PEER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes addpeer = 1;
  if (has_addpeer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->addpeer());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADD_PEER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.ADD_PEER)
  GOOGLE_DCHECK_NE(&from, this);
  const ADD_PEER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ADD_PEER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.ADD_PEER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.ADD_PEER)
    MergeFrom(*source);
  }
}

void ADD_PEER::MergeFrom(const ADD_PEER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.ADD_PEER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addpeer()) {
    _has_bits_[0] |= 0x00000001u;
    addpeer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addpeer_);
  }
}

void ADD_PEER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.ADD_PEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADD_PEER::CopyFrom(const ADD_PEER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.ADD_PEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADD_PEER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ADD_PEER::InternalSwap(ADD_PEER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addpeer_.Swap(&other->addpeer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ADD_PEER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DELETE_PEER::InitAsDefaultInstance() {
}
class DELETE_PEER::_Internal {
 public:
  using HasBits = decltype(std::declval<DELETE_PEER>()._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DELETE_PEER::DELETE_PEER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SFPacketStore.DELETE_PEER)
}
DELETE_PEER::DELETE_PEER(const DELETE_PEER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_ = from.serial_;
  // @@protoc_insertion_point(copy_constructor:SFPacketStore.DELETE_PEER)
}

void DELETE_PEER::SharedCtor() {
  serial_ = 0;
}

DELETE_PEER::~DELETE_PEER() {
  // @@protoc_insertion_point(destructor:SFPacketStore.DELETE_PEER)
  SharedDtor();
}

void DELETE_PEER::SharedDtor() {
}

void DELETE_PEER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DELETE_PEER& DELETE_PEER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DELETE_PEER_SFPacketStore_2eproto.base);
  return *internal_default_instance();
}


void DELETE_PEER::Clear() {
// @@protoc_insertion_point(message_clear_start:SFPacketStore.DELETE_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DELETE_PEER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DELETE_PEER::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SFPacketStore.DELETE_PEER)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serial = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_serial(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SFPacketStore.DELETE_PEER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SFPacketStore.DELETE_PEER)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DELETE_PEER::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SFPacketStore.DELETE_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SFPacketStore.DELETE_PEER)
}

::PROTOBUF_NAMESPACE_ID::uint8* DELETE_PEER::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SFPacketStore.DELETE_PEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SFPacketStore.DELETE_PEER)
  return target;
}

size_t DELETE_PEER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SFPacketStore.DELETE_PEER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 serial = 1;
  if (has_serial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->serial());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DELETE_PEER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SFPacketStore.DELETE_PEER)
  GOOGLE_DCHECK_NE(&from, this);
  const DELETE_PEER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DELETE_PEER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SFPacketStore.DELETE_PEER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SFPacketStore.DELETE_PEER)
    MergeFrom(*source);
  }
}

void DELETE_PEER::MergeFrom(const DELETE_PEER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SFPacketStore.DELETE_PEER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serial()) {
    set_serial(from.serial());
  }
}

void DELETE_PEER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SFPacketStore.DELETE_PEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DELETE_PEER::CopyFrom(const DELETE_PEER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SFPacketStore.DELETE_PEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DELETE_PEER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DELETE_PEER::InternalSwap(DELETE_PEER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(serial_, other->serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DELETE_PEER::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SFPacketStore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SFPacketStore::Login* Arena::CreateMaybeMessage< ::SFPacketStore::Login >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LoginSuccess* Arena::CreateMaybeMessage< ::SFPacketStore::LoginSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LoginSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LoginFail* Arena::CreateMaybeMessage< ::SFPacketStore::LoginFail >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LoginFail >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::TeamInfo_TeamMember* Arena::CreateMaybeMessage< ::SFPacketStore::TeamInfo_TeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::TeamInfo_TeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::TeamInfo* Arena::CreateMaybeMessage< ::SFPacketStore::TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::RoomMember_Member* Arena::CreateMaybeMessage< ::SFPacketStore::RoomMember_Member >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::RoomMember_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::RoomMember* Arena::CreateMaybeMessage< ::SFPacketStore::RoomMember >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::RoomMember >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::EnterTeamMember* Arena::CreateMaybeMessage< ::SFPacketStore::EnterTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::EnterTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LeaveTeamMember* Arena::CreateMaybeMessage< ::SFPacketStore::LeaveTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LeaveTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::InvalidPacket* Arena::CreateMaybeMessage< ::SFPacketStore::InvalidPacket >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::InvalidPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::EnterLobby* Arena::CreateMaybeMessage< ::SFPacketStore::EnterLobby >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::EnterLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::ChatReq* Arena::CreateMaybeMessage< ::SFPacketStore::ChatReq >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::ChatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::ChatRes* Arena::CreateMaybeMessage< ::SFPacketStore::ChatRes >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::ChatRes >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::EnterRoom* Arena::CreateMaybeMessage< ::SFPacketStore::EnterRoom >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::EnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::CreateRoom* Arena::CreateMaybeMessage< ::SFPacketStore::CreateRoom >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::CreateRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LeaveRoom* Arena::CreateMaybeMessage< ::SFPacketStore::LeaveRoom >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LeaveRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::RoomList_RoomInfo* Arena::CreateMaybeMessage< ::SFPacketStore::RoomList_RoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::RoomList_RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::RoomList* Arena::CreateMaybeMessage< ::SFPacketStore::RoomList >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::RoomList >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::RoomListRefresh* Arena::CreateMaybeMessage< ::SFPacketStore::RoomListRefresh >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::RoomListRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::ChangeTeam* Arena::CreateMaybeMessage< ::SFPacketStore::ChangeTeam >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::ChangeTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LoadingStart* Arena::CreateMaybeMessage< ::SFPacketStore::LoadingStart >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LoadingStart >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::LoadingComplete* Arena::CreateMaybeMessage< ::SFPacketStore::LoadingComplete >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::LoadingComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PlayStart* Arena::CreateMaybeMessage< ::SFPacketStore::PlayStart >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PlayStart >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PlayMove* Arena::CreateMaybeMessage< ::SFPacketStore::PlayMove >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PlayMove >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PlayEnd* Arena::CreateMaybeMessage< ::SFPacketStore::PlayEnd >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PlayEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PlayScoreInfo* Arena::CreateMaybeMessage< ::SFPacketStore::PlayScoreInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PlayScoreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PlayPlayerScore* Arena::CreateMaybeMessage< ::SFPacketStore::PlayPlayerScore >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PlayPlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PeerList_PeerInfo* Arena::CreateMaybeMessage< ::SFPacketStore::PeerList_PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PeerList_PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PeerList* Arena::CreateMaybeMessage< ::SFPacketStore::PeerList >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PeerList >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::MSG_CREATE_PLAYER* Arena::CreateMaybeMessage< ::SFPacketStore::MSG_CREATE_PLAYER >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::MSG_CREATE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::MSG_DESTROY_PLAYER* Arena::CreateMaybeMessage< ::SFPacketStore::MSG_DESTROY_PLAYER >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::MSG_DESTROY_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::PLAYER_IP* Arena::CreateMaybeMessage< ::SFPacketStore::PLAYER_IP >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::PLAYER_IP >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::ADD_PEER* Arena::CreateMaybeMessage< ::SFPacketStore::ADD_PEER >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::ADD_PEER >(arena);
}
template<> PROTOBUF_NOINLINE ::SFPacketStore::DELETE_PEER* Arena::CreateMaybeMessage< ::SFPacketStore::DELETE_PEER >(Arena* arena) {
  return Arena::CreateInternal< ::SFPacketStore::DELETE_PEER >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SevenGamePacket.proto

#include "SevenGamePacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SevenGamePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitCardCount_CardCount_SevenGamePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SevenGamePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SevenGamePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableUpdate_AddCard_SevenGamePacket_2eproto;
namespace SevenGamePacket {
class InitCardCount_CardCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitCardCount_CardCount> _instance;
} _InitCardCount_CardCount_default_instance_;
class InitCardCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitCardCount> _instance;
} _InitCardCount_default_instance_;
class PlayerIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerID> _instance;
} _PlayerID_default_instance_;
class MyCardInfo_PlayerCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyCardInfo_PlayerCard> _instance;
} _MyCardInfo_PlayerCard_default_instance_;
class MyCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyCardInfo> _instance;
} _MyCardInfo_default_instance_;
class TableUpdate_AddCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableUpdate_AddCard> _instance;
} _TableUpdate_AddCard_default_instance_;
class TableUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableUpdate> _instance;
} _TableUpdate_default_instance_;
class CurrentTurnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentTurn> _instance;
} _CurrentTurn_default_instance_;
class TurnPassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TurnPass> _instance;
} _TurnPass_default_instance_;
class CardSubmitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardSubmit> _instance;
} _CardSubmit_default_instance_;
class WinnerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Winner> _instance;
} _Winner_default_instance_;
class UserDieDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDie> _instance;
} _UserDie_default_instance_;
}  // namespace SevenGamePacket
static void InitDefaultsscc_info_CardSubmit_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_CardSubmit_default_instance_;
    new (ptr) ::SevenGamePacket::CardSubmit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::CardSubmit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardSubmit_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CardSubmit_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_CurrentTurn_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_CurrentTurn_default_instance_;
    new (ptr) ::SevenGamePacket::CurrentTurn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::CurrentTurn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrentTurn_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CurrentTurn_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_InitCardCount_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_InitCardCount_default_instance_;
    new (ptr) ::SevenGamePacket::InitCardCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::InitCardCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitCardCount_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitCardCount_SevenGamePacket_2eproto}, {
      &scc_info_InitCardCount_CardCount_SevenGamePacket_2eproto.base,}};

static void InitDefaultsscc_info_InitCardCount_CardCount_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_InitCardCount_CardCount_default_instance_;
    new (ptr) ::SevenGamePacket::InitCardCount_CardCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::InitCardCount_CardCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitCardCount_CardCount_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitCardCount_CardCount_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_MyCardInfo_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_MyCardInfo_default_instance_;
    new (ptr) ::SevenGamePacket::MyCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::MyCardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyCardInfo_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MyCardInfo_SevenGamePacket_2eproto}, {
      &scc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto.base,}};

static void InitDefaultsscc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_MyCardInfo_PlayerCard_default_instance_;
    new (ptr) ::SevenGamePacket::MyCardInfo_PlayerCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::MyCardInfo_PlayerCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_PlayerID_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_PlayerID_default_instance_;
    new (ptr) ::SevenGamePacket::PlayerID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::PlayerID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerID_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerID_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_TableUpdate_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_TableUpdate_default_instance_;
    new (ptr) ::SevenGamePacket::TableUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::TableUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableUpdate_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TableUpdate_SevenGamePacket_2eproto}, {
      &scc_info_TableUpdate_AddCard_SevenGamePacket_2eproto.base,}};

static void InitDefaultsscc_info_TableUpdate_AddCard_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_TableUpdate_AddCard_default_instance_;
    new (ptr) ::SevenGamePacket::TableUpdate_AddCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::TableUpdate_AddCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableUpdate_AddCard_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TableUpdate_AddCard_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_TurnPass_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_TurnPass_default_instance_;
    new (ptr) ::SevenGamePacket::TurnPass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::TurnPass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TurnPass_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TurnPass_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_UserDie_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_UserDie_default_instance_;
    new (ptr) ::SevenGamePacket::UserDie();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::UserDie::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDie_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserDie_SevenGamePacket_2eproto}, {}};

static void InitDefaultsscc_info_Winner_SevenGamePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SevenGamePacket::_Winner_default_instance_;
    new (ptr) ::SevenGamePacket::Winner();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SevenGamePacket::Winner::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Winner_SevenGamePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Winner_SevenGamePacket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SevenGamePacket_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SevenGamePacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SevenGamePacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SevenGamePacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount_CardCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount_CardCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount_CardCount, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount_CardCount, cardcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::InitCardCount, info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::PlayerID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::PlayerID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::PlayerID, playerindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo_PlayerCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo_PlayerCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo_PlayerCard, cardnum_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo_PlayerCard, cardtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::MyCardInfo, card_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate_AddCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate_AddCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate_AddCard, cardnum_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate_AddCard, cardtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TableUpdate, card_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CurrentTurn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CurrentTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CurrentTurn, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CurrentTurn, playername_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TurnPass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TurnPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TurnPass, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::TurnPass, ticketcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CardSubmit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CardSubmit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CardSubmit, playerindex_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CardSubmit, cardnum_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::CardSubmit, cardtype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::Winner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::Winner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::Winner, playerindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::UserDie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::UserDie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SevenGamePacket::UserDie, playerindex_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SevenGamePacket::InitCardCount_CardCount)},
  { 9, 15, sizeof(::SevenGamePacket::InitCardCount)},
  { 16, 22, sizeof(::SevenGamePacket::PlayerID)},
  { 23, 30, sizeof(::SevenGamePacket::MyCardInfo_PlayerCard)},
  { 32, 38, sizeof(::SevenGamePacket::MyCardInfo)},
  { 39, 46, sizeof(::SevenGamePacket::TableUpdate_AddCard)},
  { 48, 54, sizeof(::SevenGamePacket::TableUpdate)},
  { 55, 62, sizeof(::SevenGamePacket::CurrentTurn)},
  { 64, 71, sizeof(::SevenGamePacket::TurnPass)},
  { 73, 81, sizeof(::SevenGamePacket::CardSubmit)},
  { 84, 90, sizeof(::SevenGamePacket::Winner)},
  { 91, 97, sizeof(::SevenGamePacket::UserDie)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_InitCardCount_CardCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_InitCardCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_PlayerID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_MyCardInfo_PlayerCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_MyCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_TableUpdate_AddCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_TableUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_CurrentTurn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_TurnPass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_CardSubmit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_Winner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SevenGamePacket::_UserDie_default_instance_),
};

const char descriptor_table_protodef_SevenGamePacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025SevenGamePacket.proto\022\017SevenGamePacket"
  "\"|\n\rInitCardCount\0226\n\004info\030\004 \003(\0132(.SevenG"
  "amePacket.InitCardCount.CardCount\0323\n\tCar"
  "dCount\022\023\n\013PlayerIndex\030\001 \002(\005\022\021\n\tCardCount"
  "\030\002 \002(\005\"\037\n\010PlayerID\022\023\n\013PlayerIndex\030\001 \002(\005\""
  "s\n\nMyCardInfo\0224\n\004Card\030\r \003(\0132&.SevenGameP"
  "acket.MyCardInfo.PlayerCard\032/\n\nPlayerCar"
  "d\022\017\n\007CardNum\030\001 \002(\005\022\020\n\010CardType\030\002 \002(\005\"o\n\013"
  "TableUpdate\0222\n\004Card\0304 \003(\0132$.SevenGamePac"
  "ket.TableUpdate.AddCard\032,\n\007AddCard\022\017\n\007Ca"
  "rdNum\030\001 \002(\005\022\020\n\010CardType\030\002 \002(\005\"6\n\013Current"
  "Turn\022\023\n\013PlayerIndex\030\001 \002(\005\022\022\n\nPlayerName\030"
  "\002 \002(\t\"7\n\010TurnPass\022\023\n\013PlayerIndex\030\001 \002(\005\022\026"
  "\n\013TicketCount\030\002 \001(\005:\0010\"D\n\nCardSubmit\022\023\n\013"
  "PlayerIndex\030\001 \002(\005\022\017\n\007CardNum\030\002 \002(\005\022\020\n\010Ca"
  "rdType\030\003 \002(\005\"\035\n\006Winner\022\023\n\013PlayerIndex\030\001 "
  "\002(\005\"\036\n\007UserDie\022\023\n\013PlayerIndex\030\001 \002(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SevenGamePacket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SevenGamePacket_2eproto_sccs[12] = {
  &scc_info_CardSubmit_SevenGamePacket_2eproto.base,
  &scc_info_CurrentTurn_SevenGamePacket_2eproto.base,
  &scc_info_InitCardCount_SevenGamePacket_2eproto.base,
  &scc_info_InitCardCount_CardCount_SevenGamePacket_2eproto.base,
  &scc_info_MyCardInfo_SevenGamePacket_2eproto.base,
  &scc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto.base,
  &scc_info_PlayerID_SevenGamePacket_2eproto.base,
  &scc_info_TableUpdate_SevenGamePacket_2eproto.base,
  &scc_info_TableUpdate_AddCard_SevenGamePacket_2eproto.base,
  &scc_info_TurnPass_SevenGamePacket_2eproto.base,
  &scc_info_UserDie_SevenGamePacket_2eproto.base,
  &scc_info_Winner_SevenGamePacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SevenGamePacket_2eproto_once;
static bool descriptor_table_SevenGamePacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SevenGamePacket_2eproto = {
  &descriptor_table_SevenGamePacket_2eproto_initialized, descriptor_table_protodef_SevenGamePacket_2eproto, "SevenGamePacket.proto", 675,
  &descriptor_table_SevenGamePacket_2eproto_once, descriptor_table_SevenGamePacket_2eproto_sccs, descriptor_table_SevenGamePacket_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_SevenGamePacket_2eproto::offsets,
  file_level_metadata_SevenGamePacket_2eproto, 12, file_level_enum_descriptors_SevenGamePacket_2eproto, file_level_service_descriptors_SevenGamePacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SevenGamePacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SevenGamePacket_2eproto), true);
namespace SevenGamePacket {

// ===================================================================

void InitCardCount_CardCount::InitAsDefaultInstance() {
}
class InitCardCount_CardCount::_Internal {
 public:
  using HasBits = decltype(std::declval<InitCardCount_CardCount>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cardcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InitCardCount_CardCount::InitCardCount_CardCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.InitCardCount.CardCount)
}
InitCardCount_CardCount::InitCardCount_CardCount(const InitCardCount_CardCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardcount_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(cardcount_));
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.InitCardCount.CardCount)
}

void InitCardCount_CardCount::SharedCtor() {
  ::memset(&playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardcount_) -
      reinterpret_cast<char*>(&playerindex_)) + sizeof(cardcount_));
}

InitCardCount_CardCount::~InitCardCount_CardCount() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.InitCardCount.CardCount)
  SharedDtor();
}

void InitCardCount_CardCount::SharedDtor() {
}

void InitCardCount_CardCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitCardCount_CardCount& InitCardCount_CardCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitCardCount_CardCount_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void InitCardCount_CardCount::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.InitCardCount.CardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardcount_) -
        reinterpret_cast<char*>(&playerindex_)) + sizeof(cardcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitCardCount_CardCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CardCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardcount(&has_bits);
          cardcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitCardCount_CardCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.InitCardCount.CardCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CardCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cardcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.InitCardCount.CardCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.InitCardCount.CardCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitCardCount_CardCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.InitCardCount.CardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required int32 CardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cardcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.InitCardCount.CardCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitCardCount_CardCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.InitCardCount.CardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required int32 CardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cardcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.InitCardCount.CardCount)
  return target;
}

size_t InitCardCount_CardCount::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SevenGamePacket.InitCardCount.CardCount)
  size_t total_size = 0;

  if (has_playerindex()) {
    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  if (has_cardcount()) {
    // required int32 CardCount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardcount());
  }

  return total_size;
}
size_t InitCardCount_CardCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.InitCardCount.CardCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

    // required int32 CardCount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitCardCount_CardCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.InitCardCount.CardCount)
  GOOGLE_DCHECK_NE(&from, this);
  const InitCardCount_CardCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitCardCount_CardCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.InitCardCount.CardCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.InitCardCount.CardCount)
    MergeFrom(*source);
  }
}

void InitCardCount_CardCount::MergeFrom(const InitCardCount_CardCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.InitCardCount.CardCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardcount_ = from.cardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitCardCount_CardCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.InitCardCount.CardCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCardCount_CardCount::CopyFrom(const InitCardCount_CardCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.InitCardCount.CardCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCardCount_CardCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitCardCount_CardCount::InternalSwap(InitCardCount_CardCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
  swap(cardcount_, other->cardcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitCardCount_CardCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitCardCount::InitAsDefaultInstance() {
}
class InitCardCount::_Internal {
 public:
  using HasBits = decltype(std::declval<InitCardCount>()._has_bits_);
};

InitCardCount::InitCardCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.InitCardCount)
}
InitCardCount::InitCardCount(const InitCardCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.InitCardCount)
}

void InitCardCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitCardCount_SevenGamePacket_2eproto.base);
}

InitCardCount::~InitCardCount() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.InitCardCount)
  SharedDtor();
}

void InitCardCount::SharedDtor() {
}

void InitCardCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitCardCount& InitCardCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitCardCount_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void InitCardCount::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.InitCardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitCardCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitCardCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.InitCardCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.InitCardCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.InitCardCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitCardCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.InitCardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.InitCardCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitCardCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.InitCardCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.InitCardCount)
  return target;
}

size_t InitCardCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.InitCardCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitCardCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.InitCardCount)
  GOOGLE_DCHECK_NE(&from, this);
  const InitCardCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitCardCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.InitCardCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.InitCardCount)
    MergeFrom(*source);
  }
}

void InitCardCount::MergeFrom(const InitCardCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.InitCardCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void InitCardCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.InitCardCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitCardCount::CopyFrom(const InitCardCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.InitCardCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitCardCount::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void InitCardCount::InternalSwap(InitCardCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitCardCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerID::InitAsDefaultInstance() {
}
class PlayerID::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerID>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerID::PlayerID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.PlayerID)
}
PlayerID::PlayerID(const PlayerID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerindex_ = from.playerindex_;
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.PlayerID)
}

void PlayerID::SharedCtor() {
  playerindex_ = 0;
}

PlayerID::~PlayerID() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.PlayerID)
  SharedDtor();
}

void PlayerID::SharedDtor() {
}

void PlayerID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerID& PlayerID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerID_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void PlayerID::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.PlayerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.PlayerID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.PlayerID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.PlayerID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.PlayerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.PlayerID)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.PlayerID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.PlayerID)
  return target;
}

size_t PlayerID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.PlayerID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.PlayerID)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.PlayerID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.PlayerID)
    MergeFrom(*source);
  }
}

void PlayerID::MergeFrom(const PlayerID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.PlayerID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerindex()) {
    set_playerindex(from.playerindex());
  }
}

void PlayerID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.PlayerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerID::CopyFrom(const PlayerID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.PlayerID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PlayerID::InternalSwap(PlayerID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyCardInfo_PlayerCard::InitAsDefaultInstance() {
}
class MyCardInfo_PlayerCard::_Internal {
 public:
  using HasBits = decltype(std::declval<MyCardInfo_PlayerCard>()._has_bits_);
  static void set_has_cardnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cardtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MyCardInfo_PlayerCard::MyCardInfo_PlayerCard()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.MyCardInfo.PlayerCard)
}
MyCardInfo_PlayerCard::MyCardInfo_PlayerCard(const MyCardInfo_PlayerCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardnum_, &from.cardnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardtype_) -
    reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.MyCardInfo.PlayerCard)
}

void MyCardInfo_PlayerCard::SharedCtor() {
  ::memset(&cardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardtype_) -
      reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
}

MyCardInfo_PlayerCard::~MyCardInfo_PlayerCard() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.MyCardInfo.PlayerCard)
  SharedDtor();
}

void MyCardInfo_PlayerCard::SharedDtor() {
}

void MyCardInfo_PlayerCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyCardInfo_PlayerCard& MyCardInfo_PlayerCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyCardInfo_PlayerCard_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void MyCardInfo_PlayerCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.MyCardInfo.PlayerCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cardnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardtype_) -
        reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MyCardInfo_PlayerCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 CardNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cardnum(&has_bits);
          cardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CardType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardtype(&has_bits);
          cardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MyCardInfo_PlayerCard::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.MyCardInfo.PlayerCard)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardNum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cardnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CardType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cardtype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.MyCardInfo.PlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.MyCardInfo.PlayerCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MyCardInfo_PlayerCard::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.MyCardInfo.PlayerCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CardNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // required int32 CardType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.MyCardInfo.PlayerCard)
}

::PROTOBUF_NAMESPACE_ID::uint8* MyCardInfo_PlayerCard::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.MyCardInfo.PlayerCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CardNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // required int32 CardType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.MyCardInfo.PlayerCard)
  return target;
}

size_t MyCardInfo_PlayerCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SevenGamePacket.MyCardInfo.PlayerCard)
  size_t total_size = 0;

  if (has_cardnum()) {
    // required int32 CardNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());
  }

  if (has_cardtype()) {
    // required int32 CardType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  return total_size;
}
size_t MyCardInfo_PlayerCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.MyCardInfo.PlayerCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 CardNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());

    // required int32 CardType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyCardInfo_PlayerCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.MyCardInfo.PlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  const MyCardInfo_PlayerCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyCardInfo_PlayerCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.MyCardInfo.PlayerCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.MyCardInfo.PlayerCard)
    MergeFrom(*source);
  }
}

void MyCardInfo_PlayerCard::MergeFrom(const MyCardInfo_PlayerCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.MyCardInfo.PlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cardnum_ = from.cardnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardtype_ = from.cardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyCardInfo_PlayerCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.MyCardInfo.PlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCardInfo_PlayerCard::CopyFrom(const MyCardInfo_PlayerCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.MyCardInfo.PlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyCardInfo_PlayerCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MyCardInfo_PlayerCard::InternalSwap(MyCardInfo_PlayerCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cardnum_, other->cardnum_);
  swap(cardtype_, other->cardtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyCardInfo_PlayerCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyCardInfo::InitAsDefaultInstance() {
}
class MyCardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MyCardInfo>()._has_bits_);
};

MyCardInfo::MyCardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.MyCardInfo)
}
MyCardInfo::MyCardInfo(const MyCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      card_(from.card_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.MyCardInfo)
}

void MyCardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyCardInfo_SevenGamePacket_2eproto.base);
}

MyCardInfo::~MyCardInfo() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.MyCardInfo)
  SharedDtor();
}

void MyCardInfo::SharedDtor() {
}

void MyCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyCardInfo& MyCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyCardInfo_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void MyCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.MyCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MyCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_card(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MyCardInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.MyCardInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.MyCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.MyCardInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MyCardInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.MyCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->card(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.MyCardInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MyCardInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.MyCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->card(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.MyCardInfo)
  return target;
}

size_t MyCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.MyCardInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->card_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->card(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.MyCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MyCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.MyCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.MyCardInfo)
    MergeFrom(*source);
  }
}

void MyCardInfo::MergeFrom(const MyCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.MyCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_.MergeFrom(from.card_);
}

void MyCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.MyCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCardInfo::CopyFrom(const MyCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.MyCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyCardInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->card())) return false;
  return true;
}

void MyCardInfo::InternalSwap(MyCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&card_)->InternalSwap(CastToBase(&other->card_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableUpdate_AddCard::InitAsDefaultInstance() {
}
class TableUpdate_AddCard::_Internal {
 public:
  using HasBits = decltype(std::declval<TableUpdate_AddCard>()._has_bits_);
  static void set_has_cardnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cardtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TableUpdate_AddCard::TableUpdate_AddCard()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.TableUpdate.AddCard)
}
TableUpdate_AddCard::TableUpdate_AddCard(const TableUpdate_AddCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardnum_, &from.cardnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardtype_) -
    reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.TableUpdate.AddCard)
}

void TableUpdate_AddCard::SharedCtor() {
  ::memset(&cardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardtype_) -
      reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
}

TableUpdate_AddCard::~TableUpdate_AddCard() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.TableUpdate.AddCard)
  SharedDtor();
}

void TableUpdate_AddCard::SharedDtor() {
}

void TableUpdate_AddCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableUpdate_AddCard& TableUpdate_AddCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableUpdate_AddCard_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void TableUpdate_AddCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.TableUpdate.AddCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cardnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardtype_) -
        reinterpret_cast<char*>(&cardnum_)) + sizeof(cardtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableUpdate_AddCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 CardNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cardnum(&has_bits);
          cardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CardType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardtype(&has_bits);
          cardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableUpdate_AddCard::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.TableUpdate.AddCard)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardNum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cardnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CardType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cardtype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.TableUpdate.AddCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.TableUpdate.AddCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableUpdate_AddCard::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.TableUpdate.AddCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CardNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cardnum(), output);
  }

  // required int32 CardType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.TableUpdate.AddCard)
}

::PROTOBUF_NAMESPACE_ID::uint8* TableUpdate_AddCard::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.TableUpdate.AddCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CardNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->cardnum(), target);
  }

  // required int32 CardType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.TableUpdate.AddCard)
  return target;
}

size_t TableUpdate_AddCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SevenGamePacket.TableUpdate.AddCard)
  size_t total_size = 0;

  if (has_cardnum()) {
    // required int32 CardNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());
  }

  if (has_cardtype()) {
    // required int32 CardType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  return total_size;
}
size_t TableUpdate_AddCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.TableUpdate.AddCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 CardNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());

    // required int32 CardType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableUpdate_AddCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.TableUpdate.AddCard)
  GOOGLE_DCHECK_NE(&from, this);
  const TableUpdate_AddCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableUpdate_AddCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.TableUpdate.AddCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.TableUpdate.AddCard)
    MergeFrom(*source);
  }
}

void TableUpdate_AddCard::MergeFrom(const TableUpdate_AddCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.TableUpdate.AddCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cardnum_ = from.cardnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardtype_ = from.cardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableUpdate_AddCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.TableUpdate.AddCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdate_AddCard::CopyFrom(const TableUpdate_AddCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.TableUpdate.AddCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdate_AddCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TableUpdate_AddCard::InternalSwap(TableUpdate_AddCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cardnum_, other->cardnum_);
  swap(cardtype_, other->cardtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableUpdate_AddCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableUpdate::InitAsDefaultInstance() {
}
class TableUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TableUpdate>()._has_bits_);
};

TableUpdate::TableUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.TableUpdate)
}
TableUpdate::TableUpdate(const TableUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      card_(from.card_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.TableUpdate)
}

void TableUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableUpdate_SevenGamePacket_2eproto.base);
}

TableUpdate::~TableUpdate() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.TableUpdate)
  SharedDtor();
}

void TableUpdate::SharedDtor() {
}

void TableUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableUpdate& TableUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableUpdate_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void TableUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.TableUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_card(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 930);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.TableUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.TableUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.TableUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.TableUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      52,
      this->card(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.TableUpdate)
}

::PROTOBUF_NAMESPACE_ID::uint8* TableUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.TableUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, this->card(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.TableUpdate)
  return target;
}

size_t TableUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.TableUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->card_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->card(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.TableUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TableUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.TableUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.TableUpdate)
    MergeFrom(*source);
  }
}

void TableUpdate::MergeFrom(const TableUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.TableUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_.MergeFrom(from.card_);
}

void TableUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.TableUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdate::CopyFrom(const TableUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.TableUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdate::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->card())) return false;
  return true;
}

void TableUpdate::InternalSwap(TableUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&card_)->InternalSwap(CastToBase(&other->card_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentTurn::InitAsDefaultInstance() {
}
class CurrentTurn::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrentTurn>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurrentTurn::CurrentTurn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.CurrentTurn)
}
CurrentTurn::CurrentTurn(const CurrentTurn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  playerindex_ = from.playerindex_;
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.CurrentTurn)
}

void CurrentTurn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentTurn_SevenGamePacket_2eproto.base);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerindex_ = 0;
}

CurrentTurn::~CurrentTurn() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.CurrentTurn)
  SharedDtor();
}

void CurrentTurn::SharedDtor() {
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentTurn& CurrentTurn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentTurn_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void CurrentTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.CurrentTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmptyNoArena();
  }
  playerindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurrentTurn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string PlayerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_playername(), ptr, ctx, "SevenGamePacket.CurrentTurn.PlayerName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurrentTurn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.CurrentTurn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string PlayerName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), static_cast<int>(this->playername().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "SevenGamePacket.CurrentTurn.PlayerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.CurrentTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.CurrentTurn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurrentTurn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.CurrentTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required string PlayerName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), static_cast<int>(this->playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SevenGamePacket.CurrentTurn.PlayerName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.CurrentTurn)
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentTurn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.CurrentTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required string PlayerName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), static_cast<int>(this->playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SevenGamePacket.CurrentTurn.PlayerName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.CurrentTurn)
  return target;
}

size_t CurrentTurn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SevenGamePacket.CurrentTurn)
  size_t total_size = 0;

  if (has_playername()) {
    // required string PlayerName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_playerindex()) {
    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  return total_size;
}
size_t CurrentTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.CurrentTurn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string PlayerName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->playername());

    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentTurn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.CurrentTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentTurn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentTurn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.CurrentTurn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.CurrentTurn)
    MergeFrom(*source);
  }
}

void CurrentTurn::MergeFrom(const CurrentTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.CurrentTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentTurn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.CurrentTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentTurn::CopyFrom(const CurrentTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.CurrentTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTurn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CurrentTurn::InternalSwap(CurrentTurn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerindex_, other->playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTurn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TurnPass::InitAsDefaultInstance() {
}
class TurnPass::_Internal {
 public:
  using HasBits = decltype(std::declval<TurnPass>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ticketcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TurnPass::TurnPass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.TurnPass)
}
TurnPass::TurnPass(const TurnPass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticketcount_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(ticketcount_));
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.TurnPass)
}

void TurnPass::SharedCtor() {
  ::memset(&playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticketcount_) -
      reinterpret_cast<char*>(&playerindex_)) + sizeof(ticketcount_));
}

TurnPass::~TurnPass() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.TurnPass)
  SharedDtor();
}

void TurnPass::SharedDtor() {
}

void TurnPass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TurnPass& TurnPass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TurnPass_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void TurnPass::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.TurnPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ticketcount_) -
        reinterpret_cast<char*>(&playerindex_)) + sizeof(ticketcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TurnPass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 TicketCount = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ticketcount(&has_bits);
          ticketcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TurnPass::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.TurnPass)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TicketCount = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ticketcount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticketcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.TurnPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.TurnPass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TurnPass::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.TurnPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // optional int32 TicketCount = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->ticketcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.TurnPass)
}

::PROTOBUF_NAMESPACE_ID::uint8* TurnPass::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.TurnPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // optional int32 TicketCount = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->ticketcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.TurnPass)
  return target;
}

size_t TurnPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.TurnPass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 TicketCount = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ticketcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnPass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.TurnPass)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnPass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TurnPass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.TurnPass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.TurnPass)
    MergeFrom(*source);
  }
}

void TurnPass::MergeFrom(const TurnPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.TurnPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      ticketcount_ = from.ticketcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TurnPass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.TurnPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnPass::CopyFrom(const TurnPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.TurnPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnPass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TurnPass::InternalSwap(TurnPass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
  swap(ticketcount_, other->ticketcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TurnPass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardSubmit::InitAsDefaultInstance() {
}
class CardSubmit::_Internal {
 public:
  using HasBits = decltype(std::declval<CardSubmit>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cardnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cardtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CardSubmit::CardSubmit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.CardSubmit)
}
CardSubmit::CardSubmit(const CardSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardtype_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(cardtype_));
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.CardSubmit)
}

void CardSubmit::SharedCtor() {
  ::memset(&playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardtype_) -
      reinterpret_cast<char*>(&playerindex_)) + sizeof(cardtype_));
}

CardSubmit::~CardSubmit() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.CardSubmit)
  SharedDtor();
}

void CardSubmit::SharedDtor() {
}

void CardSubmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardSubmit& CardSubmit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardSubmit_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void CardSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.CardSubmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardtype_) -
        reinterpret_cast<char*>(&playerindex_)) + sizeof(cardtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CardSubmit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CardNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardnum(&has_bits);
          cardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CardType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cardtype(&has_bits);
          cardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CardSubmit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.CardSubmit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CardNum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cardnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CardType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_cardtype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.CardSubmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.CardSubmit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CardSubmit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.CardSubmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  // required int32 CardNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cardnum(), output);
  }

  // required int32 CardType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.CardSubmit)
}

::PROTOBUF_NAMESPACE_ID::uint8* CardSubmit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.CardSubmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  // required int32 CardNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cardnum(), target);
  }

  // required int32 CardType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.CardSubmit)
  return target;
}

size_t CardSubmit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SevenGamePacket.CardSubmit)
  size_t total_size = 0;

  if (has_playerindex()) {
    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }

  if (has_cardnum()) {
    // required int32 CardNum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());
  }

  if (has_cardtype()) {
    // required int32 CardType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  return total_size;
}
size_t CardSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.CardSubmit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 PlayerIndex = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());

    // required int32 CardNum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardnum());

    // required int32 CardType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardSubmit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.CardSubmit)
  GOOGLE_DCHECK_NE(&from, this);
  const CardSubmit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardSubmit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.CardSubmit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.CardSubmit)
    MergeFrom(*source);
  }
}

void CardSubmit::MergeFrom(const CardSubmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.CardSubmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardnum_ = from.cardnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      cardtype_ = from.cardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardSubmit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.CardSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSubmit::CopyFrom(const CardSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.CardSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSubmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CardSubmit::InternalSwap(CardSubmit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
  swap(cardnum_, other->cardnum_);
  swap(cardtype_, other->cardtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardSubmit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Winner::InitAsDefaultInstance() {
}
class Winner::_Internal {
 public:
  using HasBits = decltype(std::declval<Winner>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Winner::Winner()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.Winner)
}
Winner::Winner(const Winner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerindex_ = from.playerindex_;
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.Winner)
}

void Winner::SharedCtor() {
  playerindex_ = 0;
}

Winner::~Winner() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.Winner)
  SharedDtor();
}

void Winner::SharedDtor() {
}

void Winner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Winner& Winner::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Winner_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void Winner::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.Winner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Winner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Winner::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.Winner)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.Winner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.Winner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Winner::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.Winner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.Winner)
}

::PROTOBUF_NAMESPACE_ID::uint8* Winner::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.Winner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.Winner)
  return target;
}

size_t Winner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.Winner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Winner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.Winner)
  GOOGLE_DCHECK_NE(&from, this);
  const Winner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Winner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.Winner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.Winner)
    MergeFrom(*source);
  }
}

void Winner::MergeFrom(const Winner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.Winner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerindex()) {
    set_playerindex(from.playerindex());
  }
}

void Winner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.Winner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Winner::CopyFrom(const Winner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.Winner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Winner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Winner::InternalSwap(Winner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Winner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDie::InitAsDefaultInstance() {
}
class UserDie::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDie>()._has_bits_);
  static void set_has_playerindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserDie::UserDie()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SevenGamePacket.UserDie)
}
UserDie::UserDie(const UserDie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerindex_ = from.playerindex_;
  // @@protoc_insertion_point(copy_constructor:SevenGamePacket.UserDie)
}

void UserDie::SharedCtor() {
  playerindex_ = 0;
}

UserDie::~UserDie() {
  // @@protoc_insertion_point(destructor:SevenGamePacket.UserDie)
  SharedDtor();
}

void UserDie::SharedDtor() {
}

void UserDie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDie& UserDie::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDie_SevenGamePacket_2eproto.base);
  return *internal_default_instance();
}


void UserDie::Clear() {
// @@protoc_insertion_point(message_clear_start:SevenGamePacket.UserDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserDie::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerindex(&has_bits);
          playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserDie::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SevenGamePacket.UserDie)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PlayerIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_playerindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SevenGamePacket.UserDie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SevenGamePacket.UserDie)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserDie::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SevenGamePacket.UserDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->playerindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SevenGamePacket.UserDie)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDie::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SevenGamePacket.UserDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PlayerIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->playerindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SevenGamePacket.UserDie)
  return target;
}

size_t UserDie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SevenGamePacket.UserDie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 PlayerIndex = 1;
  if (has_playerindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDie::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SevenGamePacket.UserDie)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDie* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SevenGamePacket.UserDie)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SevenGamePacket.UserDie)
    MergeFrom(*source);
  }
}

void UserDie::MergeFrom(const UserDie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SevenGamePacket.UserDie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerindex()) {
    set_playerindex(from.playerindex());
  }
}

void UserDie::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SevenGamePacket.UserDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDie::CopyFrom(const UserDie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SevenGamePacket.UserDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserDie::InternalSwap(UserDie* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerindex_, other->playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDie::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SevenGamePacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SevenGamePacket::InitCardCount_CardCount* Arena::CreateMaybeMessage< ::SevenGamePacket::InitCardCount_CardCount >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::InitCardCount_CardCount >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::InitCardCount* Arena::CreateMaybeMessage< ::SevenGamePacket::InitCardCount >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::InitCardCount >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::PlayerID* Arena::CreateMaybeMessage< ::SevenGamePacket::PlayerID >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::PlayerID >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::MyCardInfo_PlayerCard* Arena::CreateMaybeMessage< ::SevenGamePacket::MyCardInfo_PlayerCard >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::MyCardInfo_PlayerCard >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::MyCardInfo* Arena::CreateMaybeMessage< ::SevenGamePacket::MyCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::MyCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::TableUpdate_AddCard* Arena::CreateMaybeMessage< ::SevenGamePacket::TableUpdate_AddCard >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::TableUpdate_AddCard >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::TableUpdate* Arena::CreateMaybeMessage< ::SevenGamePacket::TableUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::TableUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::CurrentTurn* Arena::CreateMaybeMessage< ::SevenGamePacket::CurrentTurn >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::CurrentTurn >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::TurnPass* Arena::CreateMaybeMessage< ::SevenGamePacket::TurnPass >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::TurnPass >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::CardSubmit* Arena::CreateMaybeMessage< ::SevenGamePacket::CardSubmit >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::CardSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::Winner* Arena::CreateMaybeMessage< ::SevenGamePacket::Winner >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::Winner >(arena);
}
template<> PROTOBUF_NOINLINE ::SevenGamePacket::UserDie* Arena::CreateMaybeMessage< ::SevenGamePacket::UserDie >(Arena* arena) {
  return Arena::CreateInternal< ::SevenGamePacket::UserDie >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolPacket.proto

#include "ProtocolPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ProtocolPacket {
class Sample1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample1> _instance;
} _Sample1_default_instance_;
class Sample2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample2> _instance;
} _Sample2_default_instance_;
class Sample3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample3> _instance;
} _Sample3_default_instance_;
class Sample4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample4> _instance;
} _Sample4_default_instance_;
}  // namespace ProtocolPacket
static void InitDefaultsscc_info_Sample1_ProtocolPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtocolPacket::_Sample1_default_instance_;
    new (ptr) ::ProtocolPacket::Sample1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtocolPacket::Sample1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample1_ProtocolPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample1_ProtocolPacket_2eproto}, {}};

static void InitDefaultsscc_info_Sample2_ProtocolPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtocolPacket::_Sample2_default_instance_;
    new (ptr) ::ProtocolPacket::Sample2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtocolPacket::Sample2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample2_ProtocolPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample2_ProtocolPacket_2eproto}, {}};

static void InitDefaultsscc_info_Sample3_ProtocolPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtocolPacket::_Sample3_default_instance_;
    new (ptr) ::ProtocolPacket::Sample3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtocolPacket::Sample3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample3_ProtocolPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample3_ProtocolPacket_2eproto}, {}};

static void InitDefaultsscc_info_Sample4_ProtocolPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtocolPacket::_Sample4_default_instance_;
    new (ptr) ::ProtocolPacket::Sample4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtocolPacket::Sample4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample4_ProtocolPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample4_ProtocolPacket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtocolPacket_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProtocolPacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtocolPacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtocolPacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample1, speed_),
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample1, move_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtocolPacket::Sample4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ProtocolPacket::Sample1)},
  { 9, 14, sizeof(::ProtocolPacket::Sample2)},
  { 14, 19, sizeof(::ProtocolPacket::Sample3)},
  { 19, 24, sizeof(::ProtocolPacket::Sample4)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtocolPacket::_Sample1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtocolPacket::_Sample2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtocolPacket::_Sample3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtocolPacket::_Sample4_default_instance_),
};

const char descriptor_table_protodef_ProtocolPacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ProtocolPacket.proto\022\016ProtocolPacket\"&"
  "\n\007Sample1\022\r\n\005speed\030\001 \002(\002\022\014\n\004move\030\002 \002(\002\"\t"
  "\n\007Sample2\"\t\n\007Sample3\"\t\n\007Sample4"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProtocolPacket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProtocolPacket_2eproto_sccs[4] = {
  &scc_info_Sample1_ProtocolPacket_2eproto.base,
  &scc_info_Sample2_ProtocolPacket_2eproto.base,
  &scc_info_Sample3_ProtocolPacket_2eproto.base,
  &scc_info_Sample4_ProtocolPacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtocolPacket_2eproto_once;
static bool descriptor_table_ProtocolPacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtocolPacket_2eproto = {
  &descriptor_table_ProtocolPacket_2eproto_initialized, descriptor_table_protodef_ProtocolPacket_2eproto, "ProtocolPacket.proto", 111,
  &descriptor_table_ProtocolPacket_2eproto_once, descriptor_table_ProtocolPacket_2eproto_sccs, descriptor_table_ProtocolPacket_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_ProtocolPacket_2eproto::offsets,
  file_level_metadata_ProtocolPacket_2eproto, 4, file_level_enum_descriptors_ProtocolPacket_2eproto, file_level_service_descriptors_ProtocolPacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProtocolPacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProtocolPacket_2eproto), true);
namespace ProtocolPacket {

// ===================================================================

void Sample1::InitAsDefaultInstance() {
}
class Sample1::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample1>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_move(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Sample1::Sample1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtocolPacket.Sample1)
}
Sample1::Sample1(const Sample1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(move_));
  // @@protoc_insertion_point(copy_constructor:ProtocolPacket.Sample1)
}

void Sample1::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(move_));
}

Sample1::~Sample1() {
  // @@protoc_insertion_point(destructor:ProtocolPacket.Sample1)
  SharedDtor();
}

void Sample1::SharedDtor() {
}

void Sample1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample1& Sample1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample1_ProtocolPacket_2eproto.base);
  return *internal_default_instance();
}


void Sample1::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolPacket.Sample1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(move_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_move(&has_bits);
          move_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample1::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtocolPacket.Sample1)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float move = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_move(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtocolPacket.Sample1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtocolPacket.Sample1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample1::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtocolPacket.Sample1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float move = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->move(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtocolPacket.Sample1)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample1::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolPacket.Sample1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float move = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->move(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolPacket.Sample1)
  return target;
}

size_t Sample1::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtocolPacket.Sample1)
  size_t total_size = 0;

  if (has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (has_move()) {
    // required float move = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Sample1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolPacket.Sample1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float move = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtocolPacket.Sample1)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtocolPacket.Sample1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtocolPacket.Sample1)
    MergeFrom(*source);
  }
}

void Sample1::MergeFrom(const Sample1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtocolPacket.Sample1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      move_ = from.move_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtocolPacket.Sample1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample1::CopyFrom(const Sample1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolPacket.Sample1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Sample1::InternalSwap(Sample1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(move_, other->move_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sample2::InitAsDefaultInstance() {
}
class Sample2::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample2>()._has_bits_);
};

Sample2::Sample2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtocolPacket.Sample2)
}
Sample2::Sample2(const Sample2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtocolPacket.Sample2)
}

void Sample2::SharedCtor() {
}

Sample2::~Sample2() {
  // @@protoc_insertion_point(destructor:ProtocolPacket.Sample2)
  SharedDtor();
}

void Sample2::SharedDtor() {
}

void Sample2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample2& Sample2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample2_ProtocolPacket_2eproto.base);
  return *internal_default_instance();
}


void Sample2::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolPacket.Sample2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample2::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtocolPacket.Sample2)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtocolPacket.Sample2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtocolPacket.Sample2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample2::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtocolPacket.Sample2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtocolPacket.Sample2)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolPacket.Sample2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolPacket.Sample2)
  return target;
}

size_t Sample2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolPacket.Sample2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtocolPacket.Sample2)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtocolPacket.Sample2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtocolPacket.Sample2)
    MergeFrom(*source);
  }
}

void Sample2::MergeFrom(const Sample2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtocolPacket.Sample2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Sample2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtocolPacket.Sample2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample2::CopyFrom(const Sample2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolPacket.Sample2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample2::IsInitialized() const {
  return true;
}

void Sample2::InternalSwap(Sample2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sample3::InitAsDefaultInstance() {
}
class Sample3::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample3>()._has_bits_);
};

Sample3::Sample3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtocolPacket.Sample3)
}
Sample3::Sample3(const Sample3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtocolPacket.Sample3)
}

void Sample3::SharedCtor() {
}

Sample3::~Sample3() {
  // @@protoc_insertion_point(destructor:ProtocolPacket.Sample3)
  SharedDtor();
}

void Sample3::SharedDtor() {
}

void Sample3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample3& Sample3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample3_ProtocolPacket_2eproto.base);
  return *internal_default_instance();
}


void Sample3::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolPacket.Sample3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample3::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtocolPacket.Sample3)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtocolPacket.Sample3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtocolPacket.Sample3)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample3::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtocolPacket.Sample3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtocolPacket.Sample3)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample3::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolPacket.Sample3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolPacket.Sample3)
  return target;
}

size_t Sample3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolPacket.Sample3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtocolPacket.Sample3)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtocolPacket.Sample3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtocolPacket.Sample3)
    MergeFrom(*source);
  }
}

void Sample3::MergeFrom(const Sample3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtocolPacket.Sample3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Sample3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtocolPacket.Sample3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample3::CopyFrom(const Sample3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolPacket.Sample3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample3::IsInitialized() const {
  return true;
}

void Sample3::InternalSwap(Sample3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sample4::InitAsDefaultInstance() {
}
class Sample4::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample4>()._has_bits_);
};

Sample4::Sample4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtocolPacket.Sample4)
}
Sample4::Sample4(const Sample4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtocolPacket.Sample4)
}

void Sample4::SharedCtor() {
}

Sample4::~Sample4() {
  // @@protoc_insertion_point(destructor:ProtocolPacket.Sample4)
  SharedDtor();
}

void Sample4::SharedDtor() {
}

void Sample4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample4& Sample4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample4_ProtocolPacket_2eproto.base);
  return *internal_default_instance();
}


void Sample4::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtocolPacket.Sample4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample4::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtocolPacket.Sample4)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtocolPacket.Sample4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtocolPacket.Sample4)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample4::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtocolPacket.Sample4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtocolPacket.Sample4)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample4::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtocolPacket.Sample4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtocolPacket.Sample4)
  return target;
}

size_t Sample4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtocolPacket.Sample4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtocolPacket.Sample4)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtocolPacket.Sample4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtocolPacket.Sample4)
    MergeFrom(*source);
  }
}

void Sample4::MergeFrom(const Sample4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtocolPacket.Sample4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Sample4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtocolPacket.Sample4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample4::CopyFrom(const Sample4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtocolPacket.Sample4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample4::IsInitialized() const {
  return true;
}

void Sample4::InternalSwap(Sample4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample4::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtocolPacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtocolPacket::Sample1* Arena::CreateMaybeMessage< ::ProtocolPacket::Sample1 >(Arena* arena) {
  return Arena::CreateInternal< ::ProtocolPacket::Sample1 >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtocolPacket::Sample2* Arena::CreateMaybeMessage< ::ProtocolPacket::Sample2 >(Arena* arena) {
  return Arena::CreateInternal< ::ProtocolPacket::Sample2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtocolPacket::Sample3* Arena::CreateMaybeMessage< ::ProtocolPacket::Sample3 >(Arena* arena) {
  return Arena::CreateInternal< ::ProtocolPacket::Sample3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtocolPacket::Sample4* Arena::CreateMaybeMessage< ::ProtocolPacket::Sample4 >(Arena* arena) {
  return Arena::CreateInternal< ::ProtocolPacket::Sample4 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

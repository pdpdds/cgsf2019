// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SevenGamePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SevenGamePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SevenGamePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SevenGamePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SevenGamePacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SevenGamePacket_2eproto;
namespace SevenGamePacket {
class CardSubmit;
class CardSubmitDefaultTypeInternal;
extern CardSubmitDefaultTypeInternal _CardSubmit_default_instance_;
class CurrentTurn;
class CurrentTurnDefaultTypeInternal;
extern CurrentTurnDefaultTypeInternal _CurrentTurn_default_instance_;
class InitCardCount;
class InitCardCountDefaultTypeInternal;
extern InitCardCountDefaultTypeInternal _InitCardCount_default_instance_;
class InitCardCount_CardCount;
class InitCardCount_CardCountDefaultTypeInternal;
extern InitCardCount_CardCountDefaultTypeInternal _InitCardCount_CardCount_default_instance_;
class MyCardInfo;
class MyCardInfoDefaultTypeInternal;
extern MyCardInfoDefaultTypeInternal _MyCardInfo_default_instance_;
class MyCardInfo_PlayerCard;
class MyCardInfo_PlayerCardDefaultTypeInternal;
extern MyCardInfo_PlayerCardDefaultTypeInternal _MyCardInfo_PlayerCard_default_instance_;
class PlayerID;
class PlayerIDDefaultTypeInternal;
extern PlayerIDDefaultTypeInternal _PlayerID_default_instance_;
class TableUpdate;
class TableUpdateDefaultTypeInternal;
extern TableUpdateDefaultTypeInternal _TableUpdate_default_instance_;
class TableUpdate_AddCard;
class TableUpdate_AddCardDefaultTypeInternal;
extern TableUpdate_AddCardDefaultTypeInternal _TableUpdate_AddCard_default_instance_;
class TurnPass;
class TurnPassDefaultTypeInternal;
extern TurnPassDefaultTypeInternal _TurnPass_default_instance_;
class UserDie;
class UserDieDefaultTypeInternal;
extern UserDieDefaultTypeInternal _UserDie_default_instance_;
class Winner;
class WinnerDefaultTypeInternal;
extern WinnerDefaultTypeInternal _Winner_default_instance_;
}  // namespace SevenGamePacket
PROTOBUF_NAMESPACE_OPEN
template<> ::SevenGamePacket::CardSubmit* Arena::CreateMaybeMessage<::SevenGamePacket::CardSubmit>(Arena*);
template<> ::SevenGamePacket::CurrentTurn* Arena::CreateMaybeMessage<::SevenGamePacket::CurrentTurn>(Arena*);
template<> ::SevenGamePacket::InitCardCount* Arena::CreateMaybeMessage<::SevenGamePacket::InitCardCount>(Arena*);
template<> ::SevenGamePacket::InitCardCount_CardCount* Arena::CreateMaybeMessage<::SevenGamePacket::InitCardCount_CardCount>(Arena*);
template<> ::SevenGamePacket::MyCardInfo* Arena::CreateMaybeMessage<::SevenGamePacket::MyCardInfo>(Arena*);
template<> ::SevenGamePacket::MyCardInfo_PlayerCard* Arena::CreateMaybeMessage<::SevenGamePacket::MyCardInfo_PlayerCard>(Arena*);
template<> ::SevenGamePacket::PlayerID* Arena::CreateMaybeMessage<::SevenGamePacket::PlayerID>(Arena*);
template<> ::SevenGamePacket::TableUpdate* Arena::CreateMaybeMessage<::SevenGamePacket::TableUpdate>(Arena*);
template<> ::SevenGamePacket::TableUpdate_AddCard* Arena::CreateMaybeMessage<::SevenGamePacket::TableUpdate_AddCard>(Arena*);
template<> ::SevenGamePacket::TurnPass* Arena::CreateMaybeMessage<::SevenGamePacket::TurnPass>(Arena*);
template<> ::SevenGamePacket::UserDie* Arena::CreateMaybeMessage<::SevenGamePacket::UserDie>(Arena*);
template<> ::SevenGamePacket::Winner* Arena::CreateMaybeMessage<::SevenGamePacket::Winner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SevenGamePacket {

// ===================================================================

class InitCardCount_CardCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.InitCardCount.CardCount) */ {
 public:
  InitCardCount_CardCount();
  virtual ~InitCardCount_CardCount();

  InitCardCount_CardCount(const InitCardCount_CardCount& from);
  InitCardCount_CardCount(InitCardCount_CardCount&& from) noexcept
    : InitCardCount_CardCount() {
    *this = ::std::move(from);
  }

  inline InitCardCount_CardCount& operator=(const InitCardCount_CardCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitCardCount_CardCount& operator=(InitCardCount_CardCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitCardCount_CardCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitCardCount_CardCount* internal_default_instance() {
    return reinterpret_cast<const InitCardCount_CardCount*>(
               &_InitCardCount_CardCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitCardCount_CardCount& a, InitCardCount_CardCount& b) {
    a.Swap(&b);
  }
  inline void Swap(InitCardCount_CardCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitCardCount_CardCount* New() const final {
    return CreateMaybeMessage<InitCardCount_CardCount>(nullptr);
  }

  InitCardCount_CardCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitCardCount_CardCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitCardCount_CardCount& from);
  void MergeFrom(const InitCardCount_CardCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitCardCount_CardCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.InitCardCount.CardCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kCardCountFieldNumber = 2,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 CardCount = 2;
  bool has_cardcount() const;
  void clear_cardcount();
  ::PROTOBUF_NAMESPACE_ID::int32 cardcount() const;
  void set_cardcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.InitCardCount.CardCount)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardcount_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class InitCardCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.InitCardCount) */ {
 public:
  InitCardCount();
  virtual ~InitCardCount();

  InitCardCount(const InitCardCount& from);
  InitCardCount(InitCardCount&& from) noexcept
    : InitCardCount() {
    *this = ::std::move(from);
  }

  inline InitCardCount& operator=(const InitCardCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitCardCount& operator=(InitCardCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitCardCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitCardCount* internal_default_instance() {
    return reinterpret_cast<const InitCardCount*>(
               &_InitCardCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitCardCount& a, InitCardCount& b) {
    a.Swap(&b);
  }
  inline void Swap(InitCardCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitCardCount* New() const final {
    return CreateMaybeMessage<InitCardCount>(nullptr);
  }

  InitCardCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitCardCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitCardCount& from);
  void MergeFrom(const InitCardCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitCardCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.InitCardCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InitCardCount_CardCount CardCount;

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 4,
  };
  // repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
  int info_size() const;
  void clear_info();
  ::SevenGamePacket::InitCardCount_CardCount* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >*
      mutable_info();
  const ::SevenGamePacket::InitCardCount_CardCount& info(int index) const;
  ::SevenGamePacket::InitCardCount_CardCount* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >&
      info() const;

  // @@protoc_insertion_point(class_scope:SevenGamePacket.InitCardCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount > info_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class PlayerID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.PlayerID) */ {
 public:
  PlayerID();
  virtual ~PlayerID();

  PlayerID(const PlayerID& from);
  PlayerID(PlayerID&& from) noexcept
    : PlayerID() {
    *this = ::std::move(from);
  }

  inline PlayerID& operator=(const PlayerID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerID& operator=(PlayerID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerID* internal_default_instance() {
    return reinterpret_cast<const PlayerID*>(
               &_PlayerID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerID& a, PlayerID& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerID* New() const final {
    return CreateMaybeMessage<PlayerID>(nullptr);
  }

  PlayerID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerID& from);
  void MergeFrom(const PlayerID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.PlayerID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.PlayerID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class MyCardInfo_PlayerCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.MyCardInfo.PlayerCard) */ {
 public:
  MyCardInfo_PlayerCard();
  virtual ~MyCardInfo_PlayerCard();

  MyCardInfo_PlayerCard(const MyCardInfo_PlayerCard& from);
  MyCardInfo_PlayerCard(MyCardInfo_PlayerCard&& from) noexcept
    : MyCardInfo_PlayerCard() {
    *this = ::std::move(from);
  }

  inline MyCardInfo_PlayerCard& operator=(const MyCardInfo_PlayerCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyCardInfo_PlayerCard& operator=(MyCardInfo_PlayerCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyCardInfo_PlayerCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyCardInfo_PlayerCard* internal_default_instance() {
    return reinterpret_cast<const MyCardInfo_PlayerCard*>(
               &_MyCardInfo_PlayerCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MyCardInfo_PlayerCard& a, MyCardInfo_PlayerCard& b) {
    a.Swap(&b);
  }
  inline void Swap(MyCardInfo_PlayerCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyCardInfo_PlayerCard* New() const final {
    return CreateMaybeMessage<MyCardInfo_PlayerCard>(nullptr);
  }

  MyCardInfo_PlayerCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyCardInfo_PlayerCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyCardInfo_PlayerCard& from);
  void MergeFrom(const MyCardInfo_PlayerCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyCardInfo_PlayerCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.MyCardInfo.PlayerCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardNumFieldNumber = 1,
    kCardTypeFieldNumber = 2,
  };
  // required int32 CardNum = 1;
  bool has_cardnum() const;
  void clear_cardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum() const;
  void set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 CardType = 2;
  bool has_cardtype() const;
  void clear_cardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype() const;
  void set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.MyCardInfo.PlayerCard)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class MyCardInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.MyCardInfo) */ {
 public:
  MyCardInfo();
  virtual ~MyCardInfo();

  MyCardInfo(const MyCardInfo& from);
  MyCardInfo(MyCardInfo&& from) noexcept
    : MyCardInfo() {
    *this = ::std::move(from);
  }

  inline MyCardInfo& operator=(const MyCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyCardInfo& operator=(MyCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyCardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyCardInfo* internal_default_instance() {
    return reinterpret_cast<const MyCardInfo*>(
               &_MyCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MyCardInfo& a, MyCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MyCardInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyCardInfo* New() const final {
    return CreateMaybeMessage<MyCardInfo>(nullptr);
  }

  MyCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyCardInfo& from);
  void MergeFrom(const MyCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.MyCardInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MyCardInfo_PlayerCard PlayerCard;

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 13,
  };
  // repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
  int card_size() const;
  void clear_card();
  ::SevenGamePacket::MyCardInfo_PlayerCard* mutable_card(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >*
      mutable_card();
  const ::SevenGamePacket::MyCardInfo_PlayerCard& card(int index) const;
  ::SevenGamePacket::MyCardInfo_PlayerCard* add_card();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >&
      card() const;

  // @@protoc_insertion_point(class_scope:SevenGamePacket.MyCardInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard > card_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class TableUpdate_AddCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.TableUpdate.AddCard) */ {
 public:
  TableUpdate_AddCard();
  virtual ~TableUpdate_AddCard();

  TableUpdate_AddCard(const TableUpdate_AddCard& from);
  TableUpdate_AddCard(TableUpdate_AddCard&& from) noexcept
    : TableUpdate_AddCard() {
    *this = ::std::move(from);
  }

  inline TableUpdate_AddCard& operator=(const TableUpdate_AddCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableUpdate_AddCard& operator=(TableUpdate_AddCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableUpdate_AddCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableUpdate_AddCard* internal_default_instance() {
    return reinterpret_cast<const TableUpdate_AddCard*>(
               &_TableUpdate_AddCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TableUpdate_AddCard& a, TableUpdate_AddCard& b) {
    a.Swap(&b);
  }
  inline void Swap(TableUpdate_AddCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableUpdate_AddCard* New() const final {
    return CreateMaybeMessage<TableUpdate_AddCard>(nullptr);
  }

  TableUpdate_AddCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableUpdate_AddCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableUpdate_AddCard& from);
  void MergeFrom(const TableUpdate_AddCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableUpdate_AddCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.TableUpdate.AddCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardNumFieldNumber = 1,
    kCardTypeFieldNumber = 2,
  };
  // required int32 CardNum = 1;
  bool has_cardnum() const;
  void clear_cardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum() const;
  void set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 CardType = 2;
  bool has_cardtype() const;
  void clear_cardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype() const;
  void set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TableUpdate.AddCard)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class TableUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.TableUpdate) */ {
 public:
  TableUpdate();
  virtual ~TableUpdate();

  TableUpdate(const TableUpdate& from);
  TableUpdate(TableUpdate&& from) noexcept
    : TableUpdate() {
    *this = ::std::move(from);
  }

  inline TableUpdate& operator=(const TableUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableUpdate& operator=(TableUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableUpdate* internal_default_instance() {
    return reinterpret_cast<const TableUpdate*>(
               &_TableUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TableUpdate& a, TableUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TableUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableUpdate* New() const final {
    return CreateMaybeMessage<TableUpdate>(nullptr);
  }

  TableUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableUpdate& from);
  void MergeFrom(const TableUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.TableUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TableUpdate_AddCard AddCard;

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 52,
  };
  // repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
  int card_size() const;
  void clear_card();
  ::SevenGamePacket::TableUpdate_AddCard* mutable_card(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >*
      mutable_card();
  const ::SevenGamePacket::TableUpdate_AddCard& card(int index) const;
  ::SevenGamePacket::TableUpdate_AddCard* add_card();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >&
      card() const;

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TableUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard > card_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class CurrentTurn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.CurrentTurn) */ {
 public:
  CurrentTurn();
  virtual ~CurrentTurn();

  CurrentTurn(const CurrentTurn& from);
  CurrentTurn(CurrentTurn&& from) noexcept
    : CurrentTurn() {
    *this = ::std::move(from);
  }

  inline CurrentTurn& operator=(const CurrentTurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentTurn& operator=(CurrentTurn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentTurn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentTurn* internal_default_instance() {
    return reinterpret_cast<const CurrentTurn*>(
               &_CurrentTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CurrentTurn& a, CurrentTurn& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentTurn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentTurn* New() const final {
    return CreateMaybeMessage<CurrentTurn>(nullptr);
  }

  CurrentTurn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentTurn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentTurn& from);
  void MergeFrom(const CurrentTurn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentTurn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.CurrentTurn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPlayerIndexFieldNumber = 1,
  };
  // required string PlayerName = 2;
  bool has_playername() const;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);

  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.CurrentTurn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class TurnPass :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.TurnPass) */ {
 public:
  TurnPass();
  virtual ~TurnPass();

  TurnPass(const TurnPass& from);
  TurnPass(TurnPass&& from) noexcept
    : TurnPass() {
    *this = ::std::move(from);
  }

  inline TurnPass& operator=(const TurnPass& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnPass& operator=(TurnPass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TurnPass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TurnPass* internal_default_instance() {
    return reinterpret_cast<const TurnPass*>(
               &_TurnPass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TurnPass& a, TurnPass& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnPass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TurnPass* New() const final {
    return CreateMaybeMessage<TurnPass>(nullptr);
  }

  TurnPass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TurnPass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TurnPass& from);
  void MergeFrom(const TurnPass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnPass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.TurnPass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kTicketCountFieldNumber = 2,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 TicketCount = 2 [default = 0];
  bool has_ticketcount() const;
  void clear_ticketcount();
  ::PROTOBUF_NAMESPACE_ID::int32 ticketcount() const;
  void set_ticketcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.TurnPass)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticketcount_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class CardSubmit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.CardSubmit) */ {
 public:
  CardSubmit();
  virtual ~CardSubmit();

  CardSubmit(const CardSubmit& from);
  CardSubmit(CardSubmit&& from) noexcept
    : CardSubmit() {
    *this = ::std::move(from);
  }

  inline CardSubmit& operator=(const CardSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardSubmit& operator=(CardSubmit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardSubmit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardSubmit* internal_default_instance() {
    return reinterpret_cast<const CardSubmit*>(
               &_CardSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CardSubmit& a, CardSubmit& b) {
    a.Swap(&b);
  }
  inline void Swap(CardSubmit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardSubmit* New() const final {
    return CreateMaybeMessage<CardSubmit>(nullptr);
  }

  CardSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardSubmit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardSubmit& from);
  void MergeFrom(const CardSubmit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardSubmit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.CardSubmit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kCardNumFieldNumber = 2,
    kCardTypeFieldNumber = 3,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 CardNum = 2;
  bool has_cardnum() const;
  void clear_cardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum() const;
  void set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 CardType = 3;
  bool has_cardtype() const;
  void clear_cardtype();
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype() const;
  void set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.CardSubmit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardtype_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class Winner :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.Winner) */ {
 public:
  Winner();
  virtual ~Winner();

  Winner(const Winner& from);
  Winner(Winner&& from) noexcept
    : Winner() {
    *this = ::std::move(from);
  }

  inline Winner& operator=(const Winner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Winner& operator=(Winner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Winner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Winner* internal_default_instance() {
    return reinterpret_cast<const Winner*>(
               &_Winner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Winner& a, Winner& b) {
    a.Swap(&b);
  }
  inline void Swap(Winner* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Winner* New() const final {
    return CreateMaybeMessage<Winner>(nullptr);
  }

  Winner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Winner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Winner& from);
  void MergeFrom(const Winner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Winner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.Winner";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.Winner)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// -------------------------------------------------------------------

class UserDie :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SevenGamePacket.UserDie) */ {
 public:
  UserDie();
  virtual ~UserDie();

  UserDie(const UserDie& from);
  UserDie(UserDie&& from) noexcept
    : UserDie() {
    *this = ::std::move(from);
  }

  inline UserDie& operator=(const UserDie& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDie& operator=(UserDie&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDie& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDie* internal_default_instance() {
    return reinterpret_cast<const UserDie*>(
               &_UserDie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserDie& a, UserDie& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDie* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDie* New() const final {
    return CreateMaybeMessage<UserDie>(nullptr);
  }

  UserDie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDie>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDie& from);
  void MergeFrom(const UserDie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDie* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SevenGamePacket.UserDie";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SevenGamePacket_2eproto);
    return ::descriptor_table_SevenGamePacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // required int32 PlayerIndex = 1;
  bool has_playerindex() const;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SevenGamePacket.UserDie)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerindex_;
  friend struct ::TableStruct_SevenGamePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitCardCount_CardCount

// required int32 PlayerIndex = 1;
inline bool InitCardCount_CardCount::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitCardCount_CardCount::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitCardCount_CardCount::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.InitCardCount.CardCount.PlayerIndex)
  return playerindex_;
}
inline void InitCardCount_CardCount::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.InitCardCount.CardCount.PlayerIndex)
}

// required int32 CardCount = 2;
inline bool InitCardCount_CardCount::has_cardcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitCardCount_CardCount::clear_cardcount() {
  cardcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitCardCount_CardCount::cardcount() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.InitCardCount.CardCount.CardCount)
  return cardcount_;
}
inline void InitCardCount_CardCount::set_cardcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cardcount_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.InitCardCount.CardCount.CardCount)
}

// -------------------------------------------------------------------

// InitCardCount

// repeated .SevenGamePacket.InitCardCount.CardCount info = 4;
inline int InitCardCount::info_size() const {
  return info_.size();
}
inline void InitCardCount::clear_info() {
  info_.Clear();
}
inline ::SevenGamePacket::InitCardCount_CardCount* InitCardCount::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:SevenGamePacket.InitCardCount.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >*
InitCardCount::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:SevenGamePacket.InitCardCount.info)
  return &info_;
}
inline const ::SevenGamePacket::InitCardCount_CardCount& InitCardCount::info(int index) const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.InitCardCount.info)
  return info_.Get(index);
}
inline ::SevenGamePacket::InitCardCount_CardCount* InitCardCount::add_info() {
  // @@protoc_insertion_point(field_add:SevenGamePacket.InitCardCount.info)
  return info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::InitCardCount_CardCount >&
InitCardCount::info() const {
  // @@protoc_insertion_point(field_list:SevenGamePacket.InitCardCount.info)
  return info_;
}

// -------------------------------------------------------------------

// PlayerID

// required int32 PlayerIndex = 1;
inline bool PlayerID::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerID::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerID::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.PlayerID.PlayerIndex)
  return playerindex_;
}
inline void PlayerID::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.PlayerID.PlayerIndex)
}

// -------------------------------------------------------------------

// MyCardInfo_PlayerCard

// required int32 CardNum = 1;
inline bool MyCardInfo_PlayerCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyCardInfo_PlayerCard::clear_cardnum() {
  cardnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyCardInfo_PlayerCard::cardnum() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.MyCardInfo.PlayerCard.CardNum)
  return cardnum_;
}
inline void MyCardInfo_PlayerCard::set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cardnum_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.MyCardInfo.PlayerCard.CardNum)
}

// required int32 CardType = 2;
inline bool MyCardInfo_PlayerCard::has_cardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyCardInfo_PlayerCard::clear_cardtype() {
  cardtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyCardInfo_PlayerCard::cardtype() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.MyCardInfo.PlayerCard.CardType)
  return cardtype_;
}
inline void MyCardInfo_PlayerCard::set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.MyCardInfo.PlayerCard.CardType)
}

// -------------------------------------------------------------------

// MyCardInfo

// repeated .SevenGamePacket.MyCardInfo.PlayerCard Card = 13;
inline int MyCardInfo::card_size() const {
  return card_.size();
}
inline void MyCardInfo::clear_card() {
  card_.Clear();
}
inline ::SevenGamePacket::MyCardInfo_PlayerCard* MyCardInfo::mutable_card(int index) {
  // @@protoc_insertion_point(field_mutable:SevenGamePacket.MyCardInfo.Card)
  return card_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >*
MyCardInfo::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:SevenGamePacket.MyCardInfo.Card)
  return &card_;
}
inline const ::SevenGamePacket::MyCardInfo_PlayerCard& MyCardInfo::card(int index) const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.MyCardInfo.Card)
  return card_.Get(index);
}
inline ::SevenGamePacket::MyCardInfo_PlayerCard* MyCardInfo::add_card() {
  // @@protoc_insertion_point(field_add:SevenGamePacket.MyCardInfo.Card)
  return card_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::MyCardInfo_PlayerCard >&
MyCardInfo::card() const {
  // @@protoc_insertion_point(field_list:SevenGamePacket.MyCardInfo.Card)
  return card_;
}

// -------------------------------------------------------------------

// TableUpdate_AddCard

// required int32 CardNum = 1;
inline bool TableUpdate_AddCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableUpdate_AddCard::clear_cardnum() {
  cardnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableUpdate_AddCard::cardnum() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.TableUpdate.AddCard.CardNum)
  return cardnum_;
}
inline void TableUpdate_AddCard::set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cardnum_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.TableUpdate.AddCard.CardNum)
}

// required int32 CardType = 2;
inline bool TableUpdate_AddCard::has_cardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableUpdate_AddCard::clear_cardtype() {
  cardtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableUpdate_AddCard::cardtype() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.TableUpdate.AddCard.CardType)
  return cardtype_;
}
inline void TableUpdate_AddCard::set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.TableUpdate.AddCard.CardType)
}

// -------------------------------------------------------------------

// TableUpdate

// repeated .SevenGamePacket.TableUpdate.AddCard Card = 52;
inline int TableUpdate::card_size() const {
  return card_.size();
}
inline void TableUpdate::clear_card() {
  card_.Clear();
}
inline ::SevenGamePacket::TableUpdate_AddCard* TableUpdate::mutable_card(int index) {
  // @@protoc_insertion_point(field_mutable:SevenGamePacket.TableUpdate.Card)
  return card_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >*
TableUpdate::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:SevenGamePacket.TableUpdate.Card)
  return &card_;
}
inline const ::SevenGamePacket::TableUpdate_AddCard& TableUpdate::card(int index) const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.TableUpdate.Card)
  return card_.Get(index);
}
inline ::SevenGamePacket::TableUpdate_AddCard* TableUpdate::add_card() {
  // @@protoc_insertion_point(field_add:SevenGamePacket.TableUpdate.Card)
  return card_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SevenGamePacket::TableUpdate_AddCard >&
TableUpdate::card() const {
  // @@protoc_insertion_point(field_list:SevenGamePacket.TableUpdate.Card)
  return card_;
}

// -------------------------------------------------------------------

// CurrentTurn

// required int32 PlayerIndex = 1;
inline bool CurrentTurn::has_playerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrentTurn::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CurrentTurn::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.CurrentTurn.PlayerIndex)
  return playerindex_;
}
inline void CurrentTurn::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.CurrentTurn.PlayerIndex)
}

// required string PlayerName = 2;
inline bool CurrentTurn::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentTurn::clear_playername() {
  playername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurrentTurn::playername() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.CurrentTurn.PlayerName)
  return playername_.GetNoArena();
}
inline void CurrentTurn::set_playername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SevenGamePacket.CurrentTurn.PlayerName)
}
inline void CurrentTurn::set_playername(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SevenGamePacket.CurrentTurn.PlayerName)
}
inline void CurrentTurn::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SevenGamePacket.CurrentTurn.PlayerName)
}
inline void CurrentTurn::set_playername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SevenGamePacket.CurrentTurn.PlayerName)
}
inline std::string* CurrentTurn::mutable_playername() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SevenGamePacket.CurrentTurn.PlayerName)
  return playername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CurrentTurn::release_playername() {
  // @@protoc_insertion_point(field_release:SevenGamePacket.CurrentTurn.PlayerName)
  if (!has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentTurn::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:SevenGamePacket.CurrentTurn.PlayerName)
}

// -------------------------------------------------------------------

// TurnPass

// required int32 PlayerIndex = 1;
inline bool TurnPass::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnPass::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TurnPass::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.TurnPass.PlayerIndex)
  return playerindex_;
}
inline void TurnPass::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.TurnPass.PlayerIndex)
}

// optional int32 TicketCount = 2 [default = 0];
inline bool TurnPass::has_ticketcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurnPass::clear_ticketcount() {
  ticketcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TurnPass::ticketcount() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.TurnPass.TicketCount)
  return ticketcount_;
}
inline void TurnPass::set_ticketcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ticketcount_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.TurnPass.TicketCount)
}

// -------------------------------------------------------------------

// CardSubmit

// required int32 PlayerIndex = 1;
inline bool CardSubmit::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardSubmit::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardSubmit::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.CardSubmit.PlayerIndex)
  return playerindex_;
}
inline void CardSubmit::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.CardSubmit.PlayerIndex)
}

// required int32 CardNum = 2;
inline bool CardSubmit::has_cardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardSubmit::clear_cardnum() {
  cardnum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardSubmit::cardnum() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.CardSubmit.CardNum)
  return cardnum_;
}
inline void CardSubmit::set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cardnum_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.CardSubmit.CardNum)
}

// required int32 CardType = 3;
inline bool CardSubmit::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardSubmit::clear_cardtype() {
  cardtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardSubmit::cardtype() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.CardSubmit.CardType)
  return cardtype_;
}
inline void CardSubmit::set_cardtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.CardSubmit.CardType)
}

// -------------------------------------------------------------------

// Winner

// required int32 PlayerIndex = 1;
inline bool Winner::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Winner::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Winner::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.Winner.PlayerIndex)
  return playerindex_;
}
inline void Winner::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.Winner.PlayerIndex)
}

// -------------------------------------------------------------------

// UserDie

// required int32 PlayerIndex = 1;
inline bool UserDie::has_playerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDie::clear_playerindex() {
  playerindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDie::playerindex() const {
  // @@protoc_insertion_point(field_get:SevenGamePacket.UserDie.PlayerIndex)
  return playerindex_;
}
inline void UserDie::set_playerindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerindex_ = value;
  // @@protoc_insertion_point(field_set:SevenGamePacket.UserDie.PlayerIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SevenGamePacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SevenGamePacket_2eproto

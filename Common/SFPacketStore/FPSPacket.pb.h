// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FPSPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FPSPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FPSPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FPSPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FPSPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FPSPacket_2eproto;
namespace FPSPacket {
class MSG_PLAYER_HEALTH;
class MSG_PLAYER_HEALTHDefaultTypeInternal;
extern MSG_PLAYER_HEALTHDefaultTypeInternal _MSG_PLAYER_HEALTH_default_instance_;
class MSG_PLAYER_LOOK_UPDATE;
class MSG_PLAYER_LOOK_UPDATEDefaultTypeInternal;
extern MSG_PLAYER_LOOK_UPDATEDefaultTypeInternal _MSG_PLAYER_LOOK_UPDATE_default_instance_;
class MSG_PLAYER_MOVE_UPDATE;
class MSG_PLAYER_MOVE_UPDATEDefaultTypeInternal;
extern MSG_PLAYER_MOVE_UPDATEDefaultTypeInternal _MSG_PLAYER_MOVE_UPDATE_default_instance_;
class MSG_PLAYER_SCORE;
class MSG_PLAYER_SCOREDefaultTypeInternal;
extern MSG_PLAYER_SCOREDefaultTypeInternal _MSG_PLAYER_SCORE_default_instance_;
class MSG_PLAYER_WEAPON_CHANGE;
class MSG_PLAYER_WEAPON_CHANGEDefaultTypeInternal;
extern MSG_PLAYER_WEAPON_CHANGEDefaultTypeInternal _MSG_PLAYER_WEAPON_CHANGE_default_instance_;
class MSG_PLAYER_WEAPON_CHANGING;
class MSG_PLAYER_WEAPON_CHANGINGDefaultTypeInternal;
extern MSG_PLAYER_WEAPON_CHANGINGDefaultTypeInternal _MSG_PLAYER_WEAPON_CHANGING_default_instance_;
class MSG_SPAWN_PLAYER;
class MSG_SPAWN_PLAYERDefaultTypeInternal;
extern MSG_SPAWN_PLAYERDefaultTypeInternal _MSG_SPAWN_PLAYER_default_instance_;
}  // namespace FPSPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::FPSPacket::MSG_PLAYER_HEALTH* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_HEALTH>(Arena*);
template<> ::FPSPacket::MSG_PLAYER_LOOK_UPDATE* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_LOOK_UPDATE>(Arena*);
template<> ::FPSPacket::MSG_PLAYER_MOVE_UPDATE* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_MOVE_UPDATE>(Arena*);
template<> ::FPSPacket::MSG_PLAYER_SCORE* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_SCORE>(Arena*);
template<> ::FPSPacket::MSG_PLAYER_WEAPON_CHANGE* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_WEAPON_CHANGE>(Arena*);
template<> ::FPSPacket::MSG_PLAYER_WEAPON_CHANGING* Arena::CreateMaybeMessage<::FPSPacket::MSG_PLAYER_WEAPON_CHANGING>(Arena*);
template<> ::FPSPacket::MSG_SPAWN_PLAYER* Arena::CreateMaybeMessage<::FPSPacket::MSG_SPAWN_PLAYER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FPSPacket {

// ===================================================================

class MSG_PLAYER_MOVE_UPDATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_MOVE_UPDATE) */ {
 public:
  MSG_PLAYER_MOVE_UPDATE();
  virtual ~MSG_PLAYER_MOVE_UPDATE();

  MSG_PLAYER_MOVE_UPDATE(const MSG_PLAYER_MOVE_UPDATE& from);
  MSG_PLAYER_MOVE_UPDATE(MSG_PLAYER_MOVE_UPDATE&& from) noexcept
    : MSG_PLAYER_MOVE_UPDATE() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_MOVE_UPDATE& operator=(const MSG_PLAYER_MOVE_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_MOVE_UPDATE& operator=(MSG_PLAYER_MOVE_UPDATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_MOVE_UPDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_MOVE_UPDATE* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_MOVE_UPDATE*>(
               &_MSG_PLAYER_MOVE_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_PLAYER_MOVE_UPDATE& a, MSG_PLAYER_MOVE_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_MOVE_UPDATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_MOVE_UPDATE* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_MOVE_UPDATE>(nullptr);
  }

  MSG_PLAYER_MOVE_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_MOVE_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_MOVE_UPDATE& from);
  void MergeFrom(const MSG_PLAYER_MOVE_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_MOVE_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_MOVE_UPDATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveupdateFieldNumber = 1,
  };
  // required bytes moveupdate = 1;
  bool has_moveupdate() const;
  void clear_moveupdate();
  const std::string& moveupdate() const;
  void set_moveupdate(const std::string& value);
  void set_moveupdate(std::string&& value);
  void set_moveupdate(const char* value);
  void set_moveupdate(const void* value, size_t size);
  std::string* mutable_moveupdate();
  std::string* release_moveupdate();
  void set_allocated_moveupdate(std::string* moveupdate);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_MOVE_UPDATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moveupdate_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_PLAYER_LOOK_UPDATE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_LOOK_UPDATE) */ {
 public:
  MSG_PLAYER_LOOK_UPDATE();
  virtual ~MSG_PLAYER_LOOK_UPDATE();

  MSG_PLAYER_LOOK_UPDATE(const MSG_PLAYER_LOOK_UPDATE& from);
  MSG_PLAYER_LOOK_UPDATE(MSG_PLAYER_LOOK_UPDATE&& from) noexcept
    : MSG_PLAYER_LOOK_UPDATE() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_LOOK_UPDATE& operator=(const MSG_PLAYER_LOOK_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_LOOK_UPDATE& operator=(MSG_PLAYER_LOOK_UPDATE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_LOOK_UPDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_LOOK_UPDATE* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_LOOK_UPDATE*>(
               &_MSG_PLAYER_LOOK_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_PLAYER_LOOK_UPDATE& a, MSG_PLAYER_LOOK_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_LOOK_UPDATE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_LOOK_UPDATE* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_LOOK_UPDATE>(nullptr);
  }

  MSG_PLAYER_LOOK_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_LOOK_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_LOOK_UPDATE& from);
  void MergeFrom(const MSG_PLAYER_LOOK_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_LOOK_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_LOOK_UPDATE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookupdateFieldNumber = 1,
  };
  // required bytes lookupdate = 1;
  bool has_lookupdate() const;
  void clear_lookupdate();
  const std::string& lookupdate() const;
  void set_lookupdate(const std::string& value);
  void set_lookupdate(std::string&& value);
  void set_lookupdate(const char* value);
  void set_lookupdate(const void* value, size_t size);
  std::string* mutable_lookupdate();
  std::string* release_lookupdate();
  void set_allocated_lookupdate(std::string* lookupdate);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_LOOK_UPDATE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookupdate_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_PLAYER_HEALTH :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_HEALTH) */ {
 public:
  MSG_PLAYER_HEALTH();
  virtual ~MSG_PLAYER_HEALTH();

  MSG_PLAYER_HEALTH(const MSG_PLAYER_HEALTH& from);
  MSG_PLAYER_HEALTH(MSG_PLAYER_HEALTH&& from) noexcept
    : MSG_PLAYER_HEALTH() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_HEALTH& operator=(const MSG_PLAYER_HEALTH& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_HEALTH& operator=(MSG_PLAYER_HEALTH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_HEALTH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_HEALTH* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_HEALTH*>(
               &_MSG_PLAYER_HEALTH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_PLAYER_HEALTH& a, MSG_PLAYER_HEALTH& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_HEALTH* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_HEALTH* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_HEALTH>(nullptr);
  }

  MSG_PLAYER_HEALTH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_HEALTH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_HEALTH& from);
  void MergeFrom(const MSG_PLAYER_HEALTH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_HEALTH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_HEALTH";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerhealthFieldNumber = 1,
  };
  // required bytes playerhealth = 1;
  bool has_playerhealth() const;
  void clear_playerhealth();
  const std::string& playerhealth() const;
  void set_playerhealth(const std::string& value);
  void set_playerhealth(std::string&& value);
  void set_playerhealth(const char* value);
  void set_playerhealth(const void* value, size_t size);
  std::string* mutable_playerhealth();
  std::string* release_playerhealth();
  void set_allocated_playerhealth(std::string* playerhealth);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_HEALTH)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerhealth_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_PLAYER_SCORE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_SCORE) */ {
 public:
  MSG_PLAYER_SCORE();
  virtual ~MSG_PLAYER_SCORE();

  MSG_PLAYER_SCORE(const MSG_PLAYER_SCORE& from);
  MSG_PLAYER_SCORE(MSG_PLAYER_SCORE&& from) noexcept
    : MSG_PLAYER_SCORE() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_SCORE& operator=(const MSG_PLAYER_SCORE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_SCORE& operator=(MSG_PLAYER_SCORE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_SCORE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_SCORE* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_SCORE*>(
               &_MSG_PLAYER_SCORE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_PLAYER_SCORE& a, MSG_PLAYER_SCORE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_SCORE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_SCORE* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_SCORE>(nullptr);
  }

  MSG_PLAYER_SCORE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_SCORE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_SCORE& from);
  void MergeFrom(const MSG_PLAYER_SCORE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_SCORE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_SCORE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerScoreFieldNumber = 1,
  };
  // required bytes PlayerScore = 1;
  bool has_playerscore() const;
  void clear_playerscore();
  const std::string& playerscore() const;
  void set_playerscore(const std::string& value);
  void set_playerscore(std::string&& value);
  void set_playerscore(const char* value);
  void set_playerscore(const void* value, size_t size);
  std::string* mutable_playerscore();
  std::string* release_playerscore();
  void set_allocated_playerscore(std::string* playerscore);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_SCORE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerscore_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_PLAYER_WEAPON_CHANGE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_WEAPON_CHANGE) */ {
 public:
  MSG_PLAYER_WEAPON_CHANGE();
  virtual ~MSG_PLAYER_WEAPON_CHANGE();

  MSG_PLAYER_WEAPON_CHANGE(const MSG_PLAYER_WEAPON_CHANGE& from);
  MSG_PLAYER_WEAPON_CHANGE(MSG_PLAYER_WEAPON_CHANGE&& from) noexcept
    : MSG_PLAYER_WEAPON_CHANGE() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_WEAPON_CHANGE& operator=(const MSG_PLAYER_WEAPON_CHANGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_WEAPON_CHANGE& operator=(MSG_PLAYER_WEAPON_CHANGE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_WEAPON_CHANGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_WEAPON_CHANGE* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_WEAPON_CHANGE*>(
               &_MSG_PLAYER_WEAPON_CHANGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_PLAYER_WEAPON_CHANGE& a, MSG_PLAYER_WEAPON_CHANGE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_WEAPON_CHANGE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_WEAPON_CHANGE* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_WEAPON_CHANGE>(nullptr);
  }

  MSG_PLAYER_WEAPON_CHANGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_WEAPON_CHANGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_WEAPON_CHANGE& from);
  void MergeFrom(const MSG_PLAYER_WEAPON_CHANGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_WEAPON_CHANGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_WEAPON_CHANGE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponChangeFieldNumber = 1,
  };
  // required bytes WeaponChange = 1;
  bool has_weaponchange() const;
  void clear_weaponchange();
  const std::string& weaponchange() const;
  void set_weaponchange(const std::string& value);
  void set_weaponchange(std::string&& value);
  void set_weaponchange(const char* value);
  void set_weaponchange(const void* value, size_t size);
  std::string* mutable_weaponchange();
  std::string* release_weaponchange();
  void set_allocated_weaponchange(std::string* weaponchange);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_WEAPON_CHANGE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weaponchange_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_PLAYER_WEAPON_CHANGING :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_PLAYER_WEAPON_CHANGING) */ {
 public:
  MSG_PLAYER_WEAPON_CHANGING();
  virtual ~MSG_PLAYER_WEAPON_CHANGING();

  MSG_PLAYER_WEAPON_CHANGING(const MSG_PLAYER_WEAPON_CHANGING& from);
  MSG_PLAYER_WEAPON_CHANGING(MSG_PLAYER_WEAPON_CHANGING&& from) noexcept
    : MSG_PLAYER_WEAPON_CHANGING() {
    *this = ::std::move(from);
  }

  inline MSG_PLAYER_WEAPON_CHANGING& operator=(const MSG_PLAYER_WEAPON_CHANGING& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PLAYER_WEAPON_CHANGING& operator=(MSG_PLAYER_WEAPON_CHANGING&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_PLAYER_WEAPON_CHANGING& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_PLAYER_WEAPON_CHANGING* internal_default_instance() {
    return reinterpret_cast<const MSG_PLAYER_WEAPON_CHANGING*>(
               &_MSG_PLAYER_WEAPON_CHANGING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_PLAYER_WEAPON_CHANGING& a, MSG_PLAYER_WEAPON_CHANGING& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PLAYER_WEAPON_CHANGING* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_PLAYER_WEAPON_CHANGING* New() const final {
    return CreateMaybeMessage<MSG_PLAYER_WEAPON_CHANGING>(nullptr);
  }

  MSG_PLAYER_WEAPON_CHANGING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_PLAYER_WEAPON_CHANGING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_PLAYER_WEAPON_CHANGING& from);
  void MergeFrom(const MSG_PLAYER_WEAPON_CHANGING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PLAYER_WEAPON_CHANGING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_PLAYER_WEAPON_CHANGING";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponChangingFieldNumber = 1,
  };
  // required bytes WeaponChanging = 1;
  bool has_weaponchanging() const;
  void clear_weaponchanging();
  const std::string& weaponchanging() const;
  void set_weaponchanging(const std::string& value);
  void set_weaponchanging(std::string&& value);
  void set_weaponchanging(const char* value);
  void set_weaponchanging(const void* value, size_t size);
  std::string* mutable_weaponchanging();
  std::string* release_weaponchanging();
  void set_allocated_weaponchanging(std::string* weaponchanging);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_PLAYER_WEAPON_CHANGING)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weaponchanging_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// -------------------------------------------------------------------

class MSG_SPAWN_PLAYER :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPSPacket.MSG_SPAWN_PLAYER) */ {
 public:
  MSG_SPAWN_PLAYER();
  virtual ~MSG_SPAWN_PLAYER();

  MSG_SPAWN_PLAYER(const MSG_SPAWN_PLAYER& from);
  MSG_SPAWN_PLAYER(MSG_SPAWN_PLAYER&& from) noexcept
    : MSG_SPAWN_PLAYER() {
    *this = ::std::move(from);
  }

  inline MSG_SPAWN_PLAYER& operator=(const MSG_SPAWN_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_SPAWN_PLAYER& operator=(MSG_SPAWN_PLAYER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_SPAWN_PLAYER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_SPAWN_PLAYER* internal_default_instance() {
    return reinterpret_cast<const MSG_SPAWN_PLAYER*>(
               &_MSG_SPAWN_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_SPAWN_PLAYER& a, MSG_SPAWN_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_SPAWN_PLAYER* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_SPAWN_PLAYER* New() const final {
    return CreateMaybeMessage<MSG_SPAWN_PLAYER>(nullptr);
  }

  MSG_SPAWN_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_SPAWN_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_SPAWN_PLAYER& from);
  void MergeFrom(const MSG_SPAWN_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_SPAWN_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPSPacket.MSG_SPAWN_PLAYER";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FPSPacket_2eproto);
    return ::descriptor_table_FPSPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnPlayerFieldNumber = 1,
  };
  // required bytes SpawnPlayer = 1;
  bool has_spawnplayer() const;
  void clear_spawnplayer();
  const std::string& spawnplayer() const;
  void set_spawnplayer(const std::string& value);
  void set_spawnplayer(std::string&& value);
  void set_spawnplayer(const char* value);
  void set_spawnplayer(const void* value, size_t size);
  std::string* mutable_spawnplayer();
  std::string* release_spawnplayer();
  void set_allocated_spawnplayer(std::string* spawnplayer);

  // @@protoc_insertion_point(class_scope:FPSPacket.MSG_SPAWN_PLAYER)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spawnplayer_;
  friend struct ::TableStruct_FPSPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_PLAYER_MOVE_UPDATE

// required bytes moveupdate = 1;
inline bool MSG_PLAYER_MOVE_UPDATE::has_moveupdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_MOVE_UPDATE::clear_moveupdate() {
  moveupdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_MOVE_UPDATE::moveupdate() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
  return moveupdate_.GetNoArena();
}
inline void MSG_PLAYER_MOVE_UPDATE::set_moveupdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  moveupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
}
inline void MSG_PLAYER_MOVE_UPDATE::set_moveupdate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  moveupdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
}
inline void MSG_PLAYER_MOVE_UPDATE::set_moveupdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  moveupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
}
inline void MSG_PLAYER_MOVE_UPDATE::set_moveupdate(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  moveupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
}
inline std::string* MSG_PLAYER_MOVE_UPDATE::mutable_moveupdate() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
  return moveupdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_MOVE_UPDATE::release_moveupdate() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
  if (!has_moveupdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return moveupdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_MOVE_UPDATE::set_allocated_moveupdate(std::string* moveupdate) {
  if (moveupdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  moveupdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moveupdate);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_MOVE_UPDATE.moveupdate)
}

// -------------------------------------------------------------------

// MSG_PLAYER_LOOK_UPDATE

// required bytes lookupdate = 1;
inline bool MSG_PLAYER_LOOK_UPDATE::has_lookupdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_LOOK_UPDATE::clear_lookupdate() {
  lookupdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_LOOK_UPDATE::lookupdate() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
  return lookupdate_.GetNoArena();
}
inline void MSG_PLAYER_LOOK_UPDATE::set_lookupdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lookupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
}
inline void MSG_PLAYER_LOOK_UPDATE::set_lookupdate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lookupdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
}
inline void MSG_PLAYER_LOOK_UPDATE::set_lookupdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lookupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
}
inline void MSG_PLAYER_LOOK_UPDATE::set_lookupdate(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lookupdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
}
inline std::string* MSG_PLAYER_LOOK_UPDATE::mutable_lookupdate() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
  return lookupdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_LOOK_UPDATE::release_lookupdate() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
  if (!has_lookupdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lookupdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_LOOK_UPDATE::set_allocated_lookupdate(std::string* lookupdate) {
  if (lookupdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lookupdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lookupdate);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_LOOK_UPDATE.lookupdate)
}

// -------------------------------------------------------------------

// MSG_PLAYER_HEALTH

// required bytes playerhealth = 1;
inline bool MSG_PLAYER_HEALTH::has_playerhealth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_HEALTH::clear_playerhealth() {
  playerhealth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_HEALTH::playerhealth() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
  return playerhealth_.GetNoArena();
}
inline void MSG_PLAYER_HEALTH::set_playerhealth(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerhealth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
}
inline void MSG_PLAYER_HEALTH::set_playerhealth(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerhealth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
}
inline void MSG_PLAYER_HEALTH::set_playerhealth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerhealth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
}
inline void MSG_PLAYER_HEALTH::set_playerhealth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerhealth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
}
inline std::string* MSG_PLAYER_HEALTH::mutable_playerhealth() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
  return playerhealth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_HEALTH::release_playerhealth() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
  if (!has_playerhealth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerhealth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_HEALTH::set_allocated_playerhealth(std::string* playerhealth) {
  if (playerhealth != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerhealth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerhealth);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_HEALTH.playerhealth)
}

// -------------------------------------------------------------------

// MSG_PLAYER_SCORE

// required bytes PlayerScore = 1;
inline bool MSG_PLAYER_SCORE::has_playerscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_SCORE::clear_playerscore() {
  playerscore_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_SCORE::playerscore() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
  return playerscore_.GetNoArena();
}
inline void MSG_PLAYER_SCORE::set_playerscore(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playerscore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
}
inline void MSG_PLAYER_SCORE::set_playerscore(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playerscore_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
}
inline void MSG_PLAYER_SCORE::set_playerscore(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playerscore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
}
inline void MSG_PLAYER_SCORE::set_playerscore(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playerscore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
}
inline std::string* MSG_PLAYER_SCORE::mutable_playerscore() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
  return playerscore_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_SCORE::release_playerscore() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
  if (!has_playerscore()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playerscore_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_SCORE::set_allocated_playerscore(std::string* playerscore) {
  if (playerscore != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playerscore_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerscore);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_SCORE.PlayerScore)
}

// -------------------------------------------------------------------

// MSG_PLAYER_WEAPON_CHANGE

// required bytes WeaponChange = 1;
inline bool MSG_PLAYER_WEAPON_CHANGE::has_weaponchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_WEAPON_CHANGE::clear_weaponchange() {
  weaponchange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_WEAPON_CHANGE::weaponchange() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
  return weaponchange_.GetNoArena();
}
inline void MSG_PLAYER_WEAPON_CHANGE::set_weaponchange(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  weaponchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
}
inline void MSG_PLAYER_WEAPON_CHANGE::set_weaponchange(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  weaponchange_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
}
inline void MSG_PLAYER_WEAPON_CHANGE::set_weaponchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  weaponchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
}
inline void MSG_PLAYER_WEAPON_CHANGE::set_weaponchange(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  weaponchange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
}
inline std::string* MSG_PLAYER_WEAPON_CHANGE::mutable_weaponchange() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
  return weaponchange_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_WEAPON_CHANGE::release_weaponchange() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
  if (!has_weaponchange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return weaponchange_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_WEAPON_CHANGE::set_allocated_weaponchange(std::string* weaponchange) {
  if (weaponchange != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weaponchange_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weaponchange);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_WEAPON_CHANGE.WeaponChange)
}

// -------------------------------------------------------------------

// MSG_PLAYER_WEAPON_CHANGING

// required bytes WeaponChanging = 1;
inline bool MSG_PLAYER_WEAPON_CHANGING::has_weaponchanging() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_PLAYER_WEAPON_CHANGING::clear_weaponchanging() {
  weaponchanging_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_PLAYER_WEAPON_CHANGING::weaponchanging() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
  return weaponchanging_.GetNoArena();
}
inline void MSG_PLAYER_WEAPON_CHANGING::set_weaponchanging(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  weaponchanging_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
}
inline void MSG_PLAYER_WEAPON_CHANGING::set_weaponchanging(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  weaponchanging_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
}
inline void MSG_PLAYER_WEAPON_CHANGING::set_weaponchanging(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  weaponchanging_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
}
inline void MSG_PLAYER_WEAPON_CHANGING::set_weaponchanging(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  weaponchanging_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
}
inline std::string* MSG_PLAYER_WEAPON_CHANGING::mutable_weaponchanging() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
  return weaponchanging_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_PLAYER_WEAPON_CHANGING::release_weaponchanging() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
  if (!has_weaponchanging()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return weaponchanging_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_PLAYER_WEAPON_CHANGING::set_allocated_weaponchanging(std::string* weaponchanging) {
  if (weaponchanging != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weaponchanging_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weaponchanging);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_PLAYER_WEAPON_CHANGING.WeaponChanging)
}

// -------------------------------------------------------------------

// MSG_SPAWN_PLAYER

// required bytes SpawnPlayer = 1;
inline bool MSG_SPAWN_PLAYER::has_spawnplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_SPAWN_PLAYER::clear_spawnplayer() {
  spawnplayer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_SPAWN_PLAYER::spawnplayer() const {
  // @@protoc_insertion_point(field_get:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
  return spawnplayer_.GetNoArena();
}
inline void MSG_SPAWN_PLAYER::set_spawnplayer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  spawnplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
}
inline void MSG_SPAWN_PLAYER::set_spawnplayer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  spawnplayer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
}
inline void MSG_SPAWN_PLAYER::set_spawnplayer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  spawnplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
}
inline void MSG_SPAWN_PLAYER::set_spawnplayer(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  spawnplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
}
inline std::string* MSG_SPAWN_PLAYER::mutable_spawnplayer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
  return spawnplayer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_SPAWN_PLAYER::release_spawnplayer() {
  // @@protoc_insertion_point(field_release:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
  if (!has_spawnplayer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return spawnplayer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_SPAWN_PLAYER::set_allocated_spawnplayer(std::string* spawnplayer) {
  if (spawnplayer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  spawnplayer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spawnplayer);
  // @@protoc_insertion_point(field_set_allocated:FPSPacket.MSG_SPAWN_PLAYER.SpawnPlayer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FPSPacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FPSPacket_2eproto
